// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gate.proto

#include "Gate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace xsf_pb {
class Gt_GtA_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gt_GtA_Handshake> _instance;
} _Gt_GtA_Handshake_default_instance_;
class GtA_Gt_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtA_Gt_Handshake> _instance;
} _GtA_Gt_Handshake_default_instance_;
class Gt_GtA_HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gt_GtA_Heartbeat> _instance;
} _Gt_GtA_Heartbeat_default_instance_;
class Gt_GtA_ClientCloseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gt_GtA_ClientClose> _instance;
} _Gt_GtA_ClientClose_default_instance_;
class GtA_Gt_ClientDisconnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtA_Gt_ClientDisconnect> _instance;
} _GtA_Gt_ClientDisconnect_default_instance_;
class GtA_Gt_ClientMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtA_Gt_ClientMessage> _instance;
} _GtA_Gt_ClientMessage_default_instance_;
class GtA_Gt_BroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtA_Gt_Broadcast> _instance;
} _GtA_Gt_Broadcast_default_instance_;
class GtA_Gt_SetServerIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GtA_Gt_SetServerId> _instance;
} _GtA_Gt_SetServerId_default_instance_;
}  // namespace xsf_pb
static void InitDefaultsscc_info_GtA_Gt_Broadcast_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_GtA_Gt_Broadcast_default_instance_;
    new (ptr) ::xsf_pb::GtA_Gt_Broadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::GtA_Gt_Broadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtA_Gt_Broadcast_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtA_Gt_Broadcast_Gate_2eproto}, {}};

static void InitDefaultsscc_info_GtA_Gt_ClientDisconnect_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_GtA_Gt_ClientDisconnect_default_instance_;
    new (ptr) ::xsf_pb::GtA_Gt_ClientDisconnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::GtA_Gt_ClientDisconnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtA_Gt_ClientDisconnect_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtA_Gt_ClientDisconnect_Gate_2eproto}, {}};

static void InitDefaultsscc_info_GtA_Gt_ClientMessage_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_GtA_Gt_ClientMessage_default_instance_;
    new (ptr) ::xsf_pb::GtA_Gt_ClientMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::GtA_Gt_ClientMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtA_Gt_ClientMessage_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtA_Gt_ClientMessage_Gate_2eproto}, {}};

static void InitDefaultsscc_info_GtA_Gt_Handshake_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_GtA_Gt_Handshake_default_instance_;
    new (ptr) ::xsf_pb::GtA_Gt_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::GtA_Gt_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtA_Gt_Handshake_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtA_Gt_Handshake_Gate_2eproto}, {}};

static void InitDefaultsscc_info_GtA_Gt_SetServerId_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_GtA_Gt_SetServerId_default_instance_;
    new (ptr) ::xsf_pb::GtA_Gt_SetServerId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::GtA_Gt_SetServerId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GtA_Gt_SetServerId_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GtA_Gt_SetServerId_Gate_2eproto}, {}};

static void InitDefaultsscc_info_Gt_GtA_ClientClose_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Gt_GtA_ClientClose_default_instance_;
    new (ptr) ::xsf_pb::Gt_GtA_ClientClose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Gt_GtA_ClientClose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gt_GtA_ClientClose_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gt_GtA_ClientClose_Gate_2eproto}, {}};

static void InitDefaultsscc_info_Gt_GtA_Handshake_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Gt_GtA_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Gt_GtA_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Gt_GtA_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gt_GtA_Handshake_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gt_GtA_Handshake_Gate_2eproto}, {}};

static void InitDefaultsscc_info_Gt_GtA_Heartbeat_Gate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Gt_GtA_Heartbeat_default_instance_;
    new (ptr) ::xsf_pb::Gt_GtA_Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Gt_GtA_Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gt_GtA_Heartbeat_Gate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gt_GtA_Heartbeat_Gate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Gate_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Gate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Gate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Gate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_GtA_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_GtA_Handshake, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_Handshake, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_GtA_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_GtA_ClientClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_GtA_ClientClose, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_ClientDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_ClientDisconnect, client_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_ClientDisconnect, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_ClientMessage, client_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_ClientMessage, client_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_Broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_Broadcast, client_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_SetServerId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_SetServerId, client_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_SetServerId, ep_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::GtA_Gt_SetServerId, server_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xsf_pb::Gt_GtA_Handshake)},
  { 6, -1, sizeof(::xsf_pb::GtA_Gt_Handshake)},
  { 12, -1, sizeof(::xsf_pb::Gt_GtA_Heartbeat)},
  { 17, -1, sizeof(::xsf_pb::Gt_GtA_ClientClose)},
  { 23, -1, sizeof(::xsf_pb::GtA_Gt_ClientDisconnect)},
  { 30, -1, sizeof(::xsf_pb::GtA_Gt_ClientMessage)},
  { 37, -1, sizeof(::xsf_pb::GtA_Gt_Broadcast)},
  { 43, -1, sizeof(::xsf_pb::GtA_Gt_SetServerId)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Gt_GtA_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_GtA_Gt_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Gt_GtA_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Gt_GtA_ClientClose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_GtA_Gt_ClientDisconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_GtA_Gt_ClientMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_GtA_Gt_Broadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_GtA_Gt_SetServerId_default_instance_),
};

const char descriptor_table_protodef_Gate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nGate.proto\022\006xsf_pb\"%\n\020Gt_GtA_Handshake"
  "\022\021\n\tserver_id\030\001 \001(\r\"%\n\020GtA_Gt_Handshake\022"
  "\021\n\tserver_id\030\001 \001(\r\"\022\n\020Gt_GtA_Heartbeat\"\'"
  "\n\022Gt_GtA_ClientClose\022\021\n\tclient_id\030\001 \001(\r\""
  "<\n\027GtA_Gt_ClientDisconnect\022\021\n\tclient_id\030"
  "\001 \001(\r\022\016\n\006reason\030\002 \001(\r\"A\n\024GtA_Gt_ClientMe"
  "ssage\022\021\n\tclient_id\030\001 \003(\r\022\026\n\016client_messa"
  "ge\030\002 \001(\014\"*\n\020GtA_Gt_Broadcast\022\026\n\016client_m"
  "essage\030\001 \001(\014\"F\n\022GtA_Gt_SetServerId\022\021\n\tcl"
  "ient_id\030\001 \001(\r\022\n\n\002ep\030\002 \001(\r\022\021\n\tserver_id\030\003"
  " \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Gate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Gate_2eproto_sccs[8] = {
  &scc_info_GtA_Gt_Broadcast_Gate_2eproto.base,
  &scc_info_GtA_Gt_ClientDisconnect_Gate_2eproto.base,
  &scc_info_GtA_Gt_ClientMessage_Gate_2eproto.base,
  &scc_info_GtA_Gt_Handshake_Gate_2eproto.base,
  &scc_info_GtA_Gt_SetServerId_Gate_2eproto.base,
  &scc_info_Gt_GtA_ClientClose_Gate_2eproto.base,
  &scc_info_Gt_GtA_Handshake_Gate_2eproto.base,
  &scc_info_Gt_GtA_Heartbeat_Gate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Gate_2eproto_once;
static bool descriptor_table_Gate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gate_2eproto = {
  &descriptor_table_Gate_2eproto_initialized, descriptor_table_protodef_Gate_2eproto, "Gate.proto", 412,
  &descriptor_table_Gate_2eproto_once, descriptor_table_Gate_2eproto_sccs, descriptor_table_Gate_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_Gate_2eproto::offsets,
  file_level_metadata_Gate_2eproto, 8, file_level_enum_descriptors_Gate_2eproto, file_level_service_descriptors_Gate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Gate_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Gate_2eproto), true);
namespace xsf_pb {

// ===================================================================

void Gt_GtA_Handshake::InitAsDefaultInstance() {
}
class Gt_GtA_Handshake::_Internal {
 public:
};

Gt_GtA_Handshake::Gt_GtA_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Gt_GtA_Handshake)
}
Gt_GtA_Handshake::Gt_GtA_Handshake(const Gt_GtA_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Gt_GtA_Handshake)
}

void Gt_GtA_Handshake::SharedCtor() {
  server_id_ = 0u;
}

Gt_GtA_Handshake::~Gt_GtA_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Gt_GtA_Handshake)
  SharedDtor();
}

void Gt_GtA_Handshake::SharedDtor() {
}

void Gt_GtA_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gt_GtA_Handshake& Gt_GtA_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gt_GtA_Handshake_Gate_2eproto.base);
  return *internal_default_instance();
}


void Gt_GtA_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Gt_GtA_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Gt_GtA_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gt_GtA_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Gt_GtA_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Gt_GtA_Handshake)
  return target;
}

size_t Gt_GtA_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Gt_GtA_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gt_GtA_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Gt_GtA_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Gt_GtA_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gt_GtA_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Gt_GtA_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Gt_GtA_Handshake)
    MergeFrom(*source);
  }
}

void Gt_GtA_Handshake::MergeFrom(const Gt_GtA_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Gt_GtA_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Gt_GtA_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Gt_GtA_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gt_GtA_Handshake::CopyFrom(const Gt_GtA_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Gt_GtA_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gt_GtA_Handshake::IsInitialized() const {
  return true;
}

void Gt_GtA_Handshake::InternalSwap(Gt_GtA_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gt_GtA_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtA_Gt_Handshake::InitAsDefaultInstance() {
}
class GtA_Gt_Handshake::_Internal {
 public:
};

GtA_Gt_Handshake::GtA_Gt_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.GtA_Gt_Handshake)
}
GtA_Gt_Handshake::GtA_Gt_Handshake(const GtA_Gt_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.GtA_Gt_Handshake)
}

void GtA_Gt_Handshake::SharedCtor() {
  server_id_ = 0u;
}

GtA_Gt_Handshake::~GtA_Gt_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.GtA_Gt_Handshake)
  SharedDtor();
}

void GtA_Gt_Handshake::SharedDtor() {
}

void GtA_Gt_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtA_Gt_Handshake& GtA_Gt_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtA_Gt_Handshake_Gate_2eproto.base);
  return *internal_default_instance();
}


void GtA_Gt_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.GtA_Gt_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* GtA_Gt_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtA_Gt_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.GtA_Gt_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.GtA_Gt_Handshake)
  return target;
}

size_t GtA_Gt_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.GtA_Gt_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtA_Gt_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.GtA_Gt_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const GtA_Gt_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtA_Gt_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.GtA_Gt_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.GtA_Gt_Handshake)
    MergeFrom(*source);
  }
}

void GtA_Gt_Handshake::MergeFrom(const GtA_Gt_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.GtA_Gt_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void GtA_Gt_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.GtA_Gt_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtA_Gt_Handshake::CopyFrom(const GtA_Gt_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.GtA_Gt_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtA_Gt_Handshake::IsInitialized() const {
  return true;
}

void GtA_Gt_Handshake::InternalSwap(GtA_Gt_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GtA_Gt_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gt_GtA_Heartbeat::InitAsDefaultInstance() {
}
class Gt_GtA_Heartbeat::_Internal {
 public:
};

Gt_GtA_Heartbeat::Gt_GtA_Heartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Gt_GtA_Heartbeat)
}
Gt_GtA_Heartbeat::Gt_GtA_Heartbeat(const Gt_GtA_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Gt_GtA_Heartbeat)
}

void Gt_GtA_Heartbeat::SharedCtor() {
}

Gt_GtA_Heartbeat::~Gt_GtA_Heartbeat() {
  // @@protoc_insertion_point(destructor:xsf_pb.Gt_GtA_Heartbeat)
  SharedDtor();
}

void Gt_GtA_Heartbeat::SharedDtor() {
}

void Gt_GtA_Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gt_GtA_Heartbeat& Gt_GtA_Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gt_GtA_Heartbeat_Gate_2eproto.base);
  return *internal_default_instance();
}


void Gt_GtA_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Gt_GtA_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Gt_GtA_Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gt_GtA_Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Gt_GtA_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Gt_GtA_Heartbeat)
  return target;
}

size_t Gt_GtA_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Gt_GtA_Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gt_GtA_Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Gt_GtA_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Gt_GtA_Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gt_GtA_Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Gt_GtA_Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Gt_GtA_Heartbeat)
    MergeFrom(*source);
  }
}

void Gt_GtA_Heartbeat::MergeFrom(const Gt_GtA_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Gt_GtA_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Gt_GtA_Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Gt_GtA_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gt_GtA_Heartbeat::CopyFrom(const Gt_GtA_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Gt_GtA_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gt_GtA_Heartbeat::IsInitialized() const {
  return true;
}

void Gt_GtA_Heartbeat::InternalSwap(Gt_GtA_Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gt_GtA_Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gt_GtA_ClientClose::InitAsDefaultInstance() {
}
class Gt_GtA_ClientClose::_Internal {
 public:
};

Gt_GtA_ClientClose::Gt_GtA_ClientClose()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Gt_GtA_ClientClose)
}
Gt_GtA_ClientClose::Gt_GtA_ClientClose(const Gt_GtA_ClientClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_ = from.client_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Gt_GtA_ClientClose)
}

void Gt_GtA_ClientClose::SharedCtor() {
  client_id_ = 0u;
}

Gt_GtA_ClientClose::~Gt_GtA_ClientClose() {
  // @@protoc_insertion_point(destructor:xsf_pb.Gt_GtA_ClientClose)
  SharedDtor();
}

void Gt_GtA_ClientClose::SharedDtor() {
}

void Gt_GtA_ClientClose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gt_GtA_ClientClose& Gt_GtA_ClientClose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gt_GtA_ClientClose_Gate_2eproto.base);
  return *internal_default_instance();
}


void Gt_GtA_ClientClose::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Gt_GtA_ClientClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Gt_GtA_ClientClose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gt_GtA_ClientClose::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Gt_GtA_ClientClose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 client_id = 1;
  if (this->client_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Gt_GtA_ClientClose)
  return target;
}

size_t Gt_GtA_ClientClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Gt_GtA_ClientClose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gt_GtA_ClientClose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Gt_GtA_ClientClose)
  GOOGLE_DCHECK_NE(&from, this);
  const Gt_GtA_ClientClose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gt_GtA_ClientClose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Gt_GtA_ClientClose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Gt_GtA_ClientClose)
    MergeFrom(*source);
  }
}

void Gt_GtA_ClientClose::MergeFrom(const Gt_GtA_ClientClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Gt_GtA_ClientClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
}

void Gt_GtA_ClientClose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Gt_GtA_ClientClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gt_GtA_ClientClose::CopyFrom(const Gt_GtA_ClientClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Gt_GtA_ClientClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gt_GtA_ClientClose::IsInitialized() const {
  return true;
}

void Gt_GtA_ClientClose::InternalSwap(Gt_GtA_ClientClose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gt_GtA_ClientClose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtA_Gt_ClientDisconnect::InitAsDefaultInstance() {
}
class GtA_Gt_ClientDisconnect::_Internal {
 public:
};

GtA_Gt_ClientDisconnect::GtA_Gt_ClientDisconnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.GtA_Gt_ClientDisconnect)
}
GtA_Gt_ClientDisconnect::GtA_Gt_ClientDisconnect(const GtA_Gt_ClientDisconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.GtA_Gt_ClientDisconnect)
}

void GtA_Gt_ClientDisconnect::SharedCtor() {
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(reason_));
}

GtA_Gt_ClientDisconnect::~GtA_Gt_ClientDisconnect() {
  // @@protoc_insertion_point(destructor:xsf_pb.GtA_Gt_ClientDisconnect)
  SharedDtor();
}

void GtA_Gt_ClientDisconnect::SharedDtor() {
}

void GtA_Gt_ClientDisconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtA_Gt_ClientDisconnect& GtA_Gt_ClientDisconnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtA_Gt_ClientDisconnect_Gate_2eproto.base);
  return *internal_default_instance();
}


void GtA_Gt_ClientDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.GtA_Gt_ClientDisconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

const char* GtA_Gt_ClientDisconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtA_Gt_ClientDisconnect::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.GtA_Gt_ClientDisconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 client_id = 1;
  if (this->client_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_id(), target);
  }

  // uint32 reason = 2;
  if (this->reason() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.GtA_Gt_ClientDisconnect)
  return target;
}

size_t GtA_Gt_ClientDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.GtA_Gt_ClientDisconnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_id());
  }

  // uint32 reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtA_Gt_ClientDisconnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.GtA_Gt_ClientDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const GtA_Gt_ClientDisconnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtA_Gt_ClientDisconnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.GtA_Gt_ClientDisconnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.GtA_Gt_ClientDisconnect)
    MergeFrom(*source);
  }
}

void GtA_Gt_ClientDisconnect::MergeFrom(const GtA_Gt_ClientDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.GtA_Gt_ClientDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void GtA_Gt_ClientDisconnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.GtA_Gt_ClientDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtA_Gt_ClientDisconnect::CopyFrom(const GtA_Gt_ClientDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.GtA_Gt_ClientDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtA_Gt_ClientDisconnect::IsInitialized() const {
  return true;
}

void GtA_Gt_ClientDisconnect::InternalSwap(GtA_Gt_ClientDisconnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GtA_Gt_ClientDisconnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtA_Gt_ClientMessage::InitAsDefaultInstance() {
}
class GtA_Gt_ClientMessage::_Internal {
 public:
};

GtA_Gt_ClientMessage::GtA_Gt_ClientMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.GtA_Gt_ClientMessage)
}
GtA_Gt_ClientMessage::GtA_Gt_ClientMessage(const GtA_Gt_ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      client_id_(from.client_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_message().empty()) {
    client_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_message_);
  }
  // @@protoc_insertion_point(copy_constructor:xsf_pb.GtA_Gt_ClientMessage)
}

void GtA_Gt_ClientMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GtA_Gt_ClientMessage_Gate_2eproto.base);
  client_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GtA_Gt_ClientMessage::~GtA_Gt_ClientMessage() {
  // @@protoc_insertion_point(destructor:xsf_pb.GtA_Gt_ClientMessage)
  SharedDtor();
}

void GtA_Gt_ClientMessage::SharedDtor() {
  client_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GtA_Gt_ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtA_Gt_ClientMessage& GtA_Gt_ClientMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtA_Gt_ClientMessage_Gate_2eproto.base);
  return *internal_default_instance();
}


void GtA_Gt_ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.GtA_Gt_ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_id_.Clear();
  client_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GtA_Gt_ClientMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_client_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_client_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes client_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_client_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtA_Gt_ClientMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.GtA_Gt_ClientMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 client_id = 1;
  {
    int byte_size = _client_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_client_id(), byte_size, target);
    }
  }

  // bytes client_message = 2;
  if (this->client_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_client_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.GtA_Gt_ClientMessage)
  return target;
}

size_t GtA_Gt_ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.GtA_Gt_ClientMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 client_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->client_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _client_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes client_message = 2;
  if (this->client_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtA_Gt_ClientMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.GtA_Gt_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GtA_Gt_ClientMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtA_Gt_ClientMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.GtA_Gt_ClientMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.GtA_Gt_ClientMessage)
    MergeFrom(*source);
  }
}

void GtA_Gt_ClientMessage::MergeFrom(const GtA_Gt_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.GtA_Gt_ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_id_.MergeFrom(from.client_id_);
  if (from.client_message().size() > 0) {

    client_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_message_);
  }
}

void GtA_Gt_ClientMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.GtA_Gt_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtA_Gt_ClientMessage::CopyFrom(const GtA_Gt_ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.GtA_Gt_ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtA_Gt_ClientMessage::IsInitialized() const {
  return true;
}

void GtA_Gt_ClientMessage::InternalSwap(GtA_Gt_ClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_id_.InternalSwap(&other->client_id_);
  client_message_.Swap(&other->client_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GtA_Gt_ClientMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtA_Gt_Broadcast::InitAsDefaultInstance() {
}
class GtA_Gt_Broadcast::_Internal {
 public:
};

GtA_Gt_Broadcast::GtA_Gt_Broadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.GtA_Gt_Broadcast)
}
GtA_Gt_Broadcast::GtA_Gt_Broadcast(const GtA_Gt_Broadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_message().empty()) {
    client_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_message_);
  }
  // @@protoc_insertion_point(copy_constructor:xsf_pb.GtA_Gt_Broadcast)
}

void GtA_Gt_Broadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GtA_Gt_Broadcast_Gate_2eproto.base);
  client_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GtA_Gt_Broadcast::~GtA_Gt_Broadcast() {
  // @@protoc_insertion_point(destructor:xsf_pb.GtA_Gt_Broadcast)
  SharedDtor();
}

void GtA_Gt_Broadcast::SharedDtor() {
  client_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GtA_Gt_Broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtA_Gt_Broadcast& GtA_Gt_Broadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtA_Gt_Broadcast_Gate_2eproto.base);
  return *internal_default_instance();
}


void GtA_Gt_Broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.GtA_Gt_Broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GtA_Gt_Broadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes client_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_client_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtA_Gt_Broadcast::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.GtA_Gt_Broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes client_message = 1;
  if (this->client_message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_client_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.GtA_Gt_Broadcast)
  return target;
}

size_t GtA_Gt_Broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.GtA_Gt_Broadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes client_message = 1;
  if (this->client_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_client_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtA_Gt_Broadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.GtA_Gt_Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const GtA_Gt_Broadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtA_Gt_Broadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.GtA_Gt_Broadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.GtA_Gt_Broadcast)
    MergeFrom(*source);
  }
}

void GtA_Gt_Broadcast::MergeFrom(const GtA_Gt_Broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.GtA_Gt_Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_message().size() > 0) {

    client_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_message_);
  }
}

void GtA_Gt_Broadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.GtA_Gt_Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtA_Gt_Broadcast::CopyFrom(const GtA_Gt_Broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.GtA_Gt_Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtA_Gt_Broadcast::IsInitialized() const {
  return true;
}

void GtA_Gt_Broadcast::InternalSwap(GtA_Gt_Broadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  client_message_.Swap(&other->client_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GtA_Gt_Broadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GtA_Gt_SetServerId::InitAsDefaultInstance() {
}
class GtA_Gt_SetServerId::_Internal {
 public:
};

GtA_Gt_SetServerId::GtA_Gt_SetServerId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.GtA_Gt_SetServerId)
}
GtA_Gt_SetServerId::GtA_Gt_SetServerId(const GtA_Gt_SetServerId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_id_) -
    reinterpret_cast<char*>(&client_id_)) + sizeof(server_id_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.GtA_Gt_SetServerId)
}

void GtA_Gt_SetServerId::SharedCtor() {
  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(server_id_));
}

GtA_Gt_SetServerId::~GtA_Gt_SetServerId() {
  // @@protoc_insertion_point(destructor:xsf_pb.GtA_Gt_SetServerId)
  SharedDtor();
}

void GtA_Gt_SetServerId::SharedDtor() {
}

void GtA_Gt_SetServerId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GtA_Gt_SetServerId& GtA_Gt_SetServerId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GtA_Gt_SetServerId_Gate_2eproto.base);
  return *internal_default_instance();
}


void GtA_Gt_SetServerId::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.GtA_Gt_SetServerId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&client_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_id_) -
      reinterpret_cast<char*>(&client_id_)) + sizeof(server_id_));
  _internal_metadata_.Clear();
}

const char* GtA_Gt_SetServerId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ep = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 server_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GtA_Gt_SetServerId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.GtA_Gt_SetServerId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 client_id = 1;
  if (this->client_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_id(), target);
  }

  // uint32 ep = 2;
  if (this->ep() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ep(), target);
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.GtA_Gt_SetServerId)
  return target;
}

size_t GtA_Gt_SetServerId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.GtA_Gt_SetServerId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 client_id = 1;
  if (this->client_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_client_id());
  }

  // uint32 ep = 2;
  if (this->ep() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ep());
  }

  // uint32 server_id = 3;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GtA_Gt_SetServerId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.GtA_Gt_SetServerId)
  GOOGLE_DCHECK_NE(&from, this);
  const GtA_Gt_SetServerId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GtA_Gt_SetServerId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.GtA_Gt_SetServerId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.GtA_Gt_SetServerId)
    MergeFrom(*source);
  }
}

void GtA_Gt_SetServerId::MergeFrom(const GtA_Gt_SetServerId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.GtA_Gt_SetServerId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_id() != 0) {
    _internal_set_client_id(from._internal_client_id());
  }
  if (from.ep() != 0) {
    _internal_set_ep(from._internal_ep());
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void GtA_Gt_SetServerId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.GtA_Gt_SetServerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GtA_Gt_SetServerId::CopyFrom(const GtA_Gt_SetServerId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.GtA_Gt_SetServerId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GtA_Gt_SetServerId::IsInitialized() const {
  return true;
}

void GtA_Gt_SetServerId::InternalSwap(GtA_Gt_SetServerId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(client_id_, other->client_id_);
  swap(ep_, other->ep_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GtA_Gt_SetServerId::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xsf_pb::Gt_GtA_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Gt_GtA_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Gt_GtA_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::GtA_Gt_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::GtA_Gt_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::GtA_Gt_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Gt_GtA_Heartbeat* Arena::CreateMaybeMessage< ::xsf_pb::Gt_GtA_Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Gt_GtA_Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Gt_GtA_ClientClose* Arena::CreateMaybeMessage< ::xsf_pb::Gt_GtA_ClientClose >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Gt_GtA_ClientClose >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::GtA_Gt_ClientDisconnect* Arena::CreateMaybeMessage< ::xsf_pb::GtA_Gt_ClientDisconnect >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::GtA_Gt_ClientDisconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::GtA_Gt_ClientMessage* Arena::CreateMaybeMessage< ::xsf_pb::GtA_Gt_ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::GtA_Gt_ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::GtA_Gt_Broadcast* Arena::CreateMaybeMessage< ::xsf_pb::GtA_Gt_Broadcast >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::GtA_Gt_Broadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::GtA_Gt_SetServerId* Arena::CreateMaybeMessage< ::xsf_pb::GtA_Gt_SetServerId >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::GtA_Gt_SetServerId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

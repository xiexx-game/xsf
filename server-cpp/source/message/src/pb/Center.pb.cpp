// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Center.proto

#include "Center.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Center_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ServerInfo_Center_2eproto;
namespace xsf_pb {
class Cc_C_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cc_C_Handshake> _instance;
} _Cc_C_Handshake_default_instance_;
class C_Cc_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Cc_Handshake> _instance;
} _C_Cc_Handshake_default_instance_;
class Cc_C_HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cc_C_Heartbeat> _instance;
} _Cc_C_Heartbeat_default_instance_;
class MSG_ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ServerInfo> _instance;
} _MSG_ServerInfo_default_instance_;
class Cc_C_ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cc_C_ServerInfo> _instance;
} _Cc_C_ServerInfo_default_instance_;
class C_Cc_ServerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Cc_ServerInfo> _instance;
} _C_Cc_ServerInfo_default_instance_;
class Cc_C_ServerLostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cc_C_ServerLost> _instance;
} _Cc_C_ServerLost_default_instance_;
class C_Cc_ServerLostDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Cc_ServerLost> _instance;
} _C_Cc_ServerLost_default_instance_;
class Cc_C_ServerOkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Cc_C_ServerOk> _instance;
} _Cc_C_ServerOk_default_instance_;
class C_Cc_ServerOkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Cc_ServerOk> _instance;
} _C_Cc_ServerOk_default_instance_;
class C_Cc_StopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C_Cc_Stop> _instance;
} _C_Cc_Stop_default_instance_;
}  // namespace xsf_pb
static void InitDefaultsscc_info_C_Cc_Handshake_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_C_Cc_Handshake_default_instance_;
    new (ptr) ::xsf_pb::C_Cc_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::C_Cc_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_Cc_Handshake_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_Cc_Handshake_Center_2eproto}, {}};

static void InitDefaultsscc_info_C_Cc_ServerInfo_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_C_Cc_ServerInfo_default_instance_;
    new (ptr) ::xsf_pb::C_Cc_ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::C_Cc_ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_C_Cc_ServerInfo_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_C_Cc_ServerInfo_Center_2eproto}, {
      &scc_info_MSG_ServerInfo_Center_2eproto.base,}};

static void InitDefaultsscc_info_C_Cc_ServerLost_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_C_Cc_ServerLost_default_instance_;
    new (ptr) ::xsf_pb::C_Cc_ServerLost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::C_Cc_ServerLost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_Cc_ServerLost_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_Cc_ServerLost_Center_2eproto}, {}};

static void InitDefaultsscc_info_C_Cc_ServerOk_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_C_Cc_ServerOk_default_instance_;
    new (ptr) ::xsf_pb::C_Cc_ServerOk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::C_Cc_ServerOk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_Cc_ServerOk_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_Cc_ServerOk_Center_2eproto}, {}};

static void InitDefaultsscc_info_C_Cc_Stop_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_C_Cc_Stop_default_instance_;
    new (ptr) ::xsf_pb::C_Cc_Stop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::C_Cc_Stop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C_Cc_Stop_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C_Cc_Stop_Center_2eproto}, {}};

static void InitDefaultsscc_info_Cc_C_Handshake_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Cc_C_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Cc_C_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Cc_C_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cc_C_Handshake_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cc_C_Handshake_Center_2eproto}, {}};

static void InitDefaultsscc_info_Cc_C_Heartbeat_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Cc_C_Heartbeat_default_instance_;
    new (ptr) ::xsf_pb::Cc_C_Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Cc_C_Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cc_C_Heartbeat_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cc_C_Heartbeat_Center_2eproto}, {}};

static void InitDefaultsscc_info_Cc_C_ServerInfo_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Cc_C_ServerInfo_default_instance_;
    new (ptr) ::xsf_pb::Cc_C_ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Cc_C_ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Cc_C_ServerInfo_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Cc_C_ServerInfo_Center_2eproto}, {
      &scc_info_MSG_ServerInfo_Center_2eproto.base,}};

static void InitDefaultsscc_info_Cc_C_ServerLost_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Cc_C_ServerLost_default_instance_;
    new (ptr) ::xsf_pb::Cc_C_ServerLost();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Cc_C_ServerLost::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cc_C_ServerLost_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cc_C_ServerLost_Center_2eproto}, {}};

static void InitDefaultsscc_info_Cc_C_ServerOk_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Cc_C_ServerOk_default_instance_;
    new (ptr) ::xsf_pb::Cc_C_ServerOk();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Cc_C_ServerOk::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cc_C_ServerOk_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Cc_C_ServerOk_Center_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ServerInfo_Center_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_MSG_ServerInfo_default_instance_;
    new (ptr) ::xsf_pb::MSG_ServerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::MSG_ServerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ServerInfo_Center_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ServerInfo_Center_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Center_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Center_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Center_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Center_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_Handshake, server_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_Handshake, ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_Handshake, server_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_Handshake, new_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_Handshake, ports_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::MSG_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::MSG_ServerInfo, server_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::MSG_ServerInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::MSG_ServerInfo, ports_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::MSG_ServerInfo, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_ServerInfo, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_ServerInfo, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_ServerLost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_ServerLost, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_ServerLost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_ServerLost, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_ServerOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Cc_C_ServerOk, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_ServerOk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_ServerOk, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::C_Cc_Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xsf_pb::Cc_C_Handshake)},
  { 7, -1, sizeof(::xsf_pb::C_Cc_Handshake)},
  { 15, -1, sizeof(::xsf_pb::Cc_C_Heartbeat)},
  { 20, -1, sizeof(::xsf_pb::MSG_ServerInfo)},
  { 29, -1, sizeof(::xsf_pb::Cc_C_ServerInfo)},
  { 35, -1, sizeof(::xsf_pb::C_Cc_ServerInfo)},
  { 41, -1, sizeof(::xsf_pb::Cc_C_ServerLost)},
  { 47, -1, sizeof(::xsf_pb::C_Cc_ServerLost)},
  { 53, -1, sizeof(::xsf_pb::Cc_C_ServerOk)},
  { 59, -1, sizeof(::xsf_pb::C_Cc_ServerOk)},
  { 65, -1, sizeof(::xsf_pb::C_Cc_Stop)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Cc_C_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_C_Cc_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Cc_C_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_MSG_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Cc_C_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_C_Cc_ServerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Cc_C_ServerLost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_C_Cc_ServerLost_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Cc_C_ServerOk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_C_Cc_ServerOk_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_C_Cc_Stop_default_instance_),
};

const char descriptor_table_protodef_Center_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Center.proto\022\006xsf_pb\"2\n\016Cc_C_Handshake"
  "\022\021\n\tserver_id\030\001 \001(\r\022\r\n\005ports\030\002 \003(\r\"B\n\016C_"
  "Cc_Handshake\022\021\n\tserver_id\030\001 \001(\r\022\016\n\006new_i"
  "d\030\002 \001(\r\022\r\n\005ports\030\003 \003(\r\"\020\n\016Cc_C_Heartbeat"
  "\"N\n\016MSG_ServerInfo\022\021\n\tserver_id\030\001 \001(\r\022\n\n"
  "\002ip\030\002 \001(\t\022\r\n\005ports\030\003 \003(\r\022\016\n\006status\030\004 \001(\r"
  "\"8\n\017Cc_C_ServerInfo\022%\n\005infos\030\001 \003(\0132\026.xsf"
  "_pb.MSG_ServerInfo\"8\n\017C_Cc_ServerInfo\022%\n"
  "\005infos\030\001 \003(\0132\026.xsf_pb.MSG_ServerInfo\"$\n\017"
  "Cc_C_ServerLost\022\021\n\tserver_id\030\001 \001(\r\"$\n\017C_"
  "Cc_ServerLost\022\021\n\tserver_id\030\001 \001(\r\"\"\n\rCc_C"
  "_ServerOk\022\021\n\tserver_id\030\001 \001(\r\"\"\n\rC_Cc_Ser"
  "verOk\022\021\n\tserver_id\030\001 \001(\r\"\013\n\tC_Cc_Stopb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Center_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Center_2eproto_sccs[11] = {
  &scc_info_C_Cc_Handshake_Center_2eproto.base,
  &scc_info_C_Cc_ServerInfo_Center_2eproto.base,
  &scc_info_C_Cc_ServerLost_Center_2eproto.base,
  &scc_info_C_Cc_ServerOk_Center_2eproto.base,
  &scc_info_C_Cc_Stop_Center_2eproto.base,
  &scc_info_Cc_C_Handshake_Center_2eproto.base,
  &scc_info_Cc_C_Heartbeat_Center_2eproto.base,
  &scc_info_Cc_C_ServerInfo_Center_2eproto.base,
  &scc_info_Cc_C_ServerLost_Center_2eproto.base,
  &scc_info_Cc_C_ServerOk_Center_2eproto.base,
  &scc_info_MSG_ServerInfo_Center_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Center_2eproto_once;
static bool descriptor_table_Center_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Center_2eproto = {
  &descriptor_table_Center_2eproto_initialized, descriptor_table_protodef_Center_2eproto, "Center.proto", 525,
  &descriptor_table_Center_2eproto_once, descriptor_table_Center_2eproto_sccs, descriptor_table_Center_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_Center_2eproto::offsets,
  file_level_metadata_Center_2eproto, 11, file_level_enum_descriptors_Center_2eproto, file_level_service_descriptors_Center_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Center_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Center_2eproto), true);
namespace xsf_pb {

// ===================================================================

void Cc_C_Handshake::InitAsDefaultInstance() {
}
class Cc_C_Handshake::_Internal {
 public:
};

Cc_C_Handshake::Cc_C_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Cc_C_Handshake)
}
Cc_C_Handshake::Cc_C_Handshake(const Cc_C_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Cc_C_Handshake)
}

void Cc_C_Handshake::SharedCtor() {
  server_id_ = 0u;
}

Cc_C_Handshake::~Cc_C_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Cc_C_Handshake)
  SharedDtor();
}

void Cc_C_Handshake::SharedDtor() {
}

void Cc_C_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cc_C_Handshake& Cc_C_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cc_C_Handshake_Center_2eproto.base);
  return *internal_default_instance();
}


void Cc_C_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Cc_C_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Cc_C_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ports = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ports(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_ports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cc_C_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Cc_C_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  // repeated uint32 ports = 2;
  {
    int byte_size = _ports_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_ports(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Cc_C_Handshake)
  return target;
}

size_t Cc_C_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Cc_C_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ports = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ports_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ports_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cc_C_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Cc_C_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Cc_C_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cc_C_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Cc_C_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Cc_C_Handshake)
    MergeFrom(*source);
  }
}

void Cc_C_Handshake::MergeFrom(const Cc_C_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Cc_C_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Cc_C_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Cc_C_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cc_C_Handshake::CopyFrom(const Cc_C_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Cc_C_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cc_C_Handshake::IsInitialized() const {
  return true;
}

void Cc_C_Handshake::InternalSwap(Cc_C_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cc_C_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C_Cc_Handshake::InitAsDefaultInstance() {
}
class C_Cc_Handshake::_Internal {
 public:
};

C_Cc_Handshake::C_Cc_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.C_Cc_Handshake)
}
C_Cc_Handshake::C_Cc_Handshake(const C_Cc_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_id_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(new_id_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.C_Cc_Handshake)
}

void C_Cc_Handshake::SharedCtor() {
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(new_id_));
}

C_Cc_Handshake::~C_Cc_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.C_Cc_Handshake)
  SharedDtor();
}

void C_Cc_Handshake::SharedDtor() {
}

void C_Cc_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Cc_Handshake& C_Cc_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Cc_Handshake_Center_2eproto.base);
  return *internal_default_instance();
}


void C_Cc_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.C_Cc_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_id_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(new_id_));
  _internal_metadata_.Clear();
}

const char* C_Cc_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 new_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          new_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ports(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_ports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Cc_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.C_Cc_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  // uint32 new_id = 2;
  if (this->new_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_id(), target);
  }

  // repeated uint32 ports = 3;
  {
    int byte_size = _ports_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_ports(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.C_Cc_Handshake)
  return target;
}

size_t C_Cc_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.C_Cc_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ports = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ports_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ports_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  // uint32 new_id = 2;
  if (this->new_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Cc_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.C_Cc_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Cc_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Cc_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.C_Cc_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.C_Cc_Handshake)
    MergeFrom(*source);
  }
}

void C_Cc_Handshake::MergeFrom(const C_Cc_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.C_Cc_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.new_id() != 0) {
    _internal_set_new_id(from._internal_new_id());
  }
}

void C_Cc_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.C_Cc_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Cc_Handshake::CopyFrom(const C_Cc_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.C_Cc_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Cc_Handshake::IsInitialized() const {
  return true;
}

void C_Cc_Handshake::InternalSwap(C_Cc_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  swap(server_id_, other->server_id_);
  swap(new_id_, other->new_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Cc_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cc_C_Heartbeat::InitAsDefaultInstance() {
}
class Cc_C_Heartbeat::_Internal {
 public:
};

Cc_C_Heartbeat::Cc_C_Heartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Cc_C_Heartbeat)
}
Cc_C_Heartbeat::Cc_C_Heartbeat(const Cc_C_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Cc_C_Heartbeat)
}

void Cc_C_Heartbeat::SharedCtor() {
}

Cc_C_Heartbeat::~Cc_C_Heartbeat() {
  // @@protoc_insertion_point(destructor:xsf_pb.Cc_C_Heartbeat)
  SharedDtor();
}

void Cc_C_Heartbeat::SharedDtor() {
}

void Cc_C_Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cc_C_Heartbeat& Cc_C_Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cc_C_Heartbeat_Center_2eproto.base);
  return *internal_default_instance();
}


void Cc_C_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Cc_C_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Cc_C_Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cc_C_Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Cc_C_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Cc_C_Heartbeat)
  return target;
}

size_t Cc_C_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Cc_C_Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cc_C_Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Cc_C_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Cc_C_Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cc_C_Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Cc_C_Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Cc_C_Heartbeat)
    MergeFrom(*source);
  }
}

void Cc_C_Heartbeat::MergeFrom(const Cc_C_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Cc_C_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Cc_C_Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Cc_C_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cc_C_Heartbeat::CopyFrom(const Cc_C_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Cc_C_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cc_C_Heartbeat::IsInitialized() const {
  return true;
}

void Cc_C_Heartbeat::InternalSwap(Cc_C_Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cc_C_Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ServerInfo::InitAsDefaultInstance() {
}
class MSG_ServerInfo::_Internal {
 public:
};

MSG_ServerInfo::MSG_ServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.MSG_ServerInfo)
}
MSG_ServerInfo::MSG_ServerInfo(const MSG_ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ports_(from.ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&server_id_, &from.server_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.MSG_ServerInfo)
}

void MSG_ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ServerInfo_Center_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
}

MSG_ServerInfo::~MSG_ServerInfo() {
  // @@protoc_insertion_point(destructor:xsf_pb.MSG_ServerInfo)
  SharedDtor();
}

void MSG_ServerInfo::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ServerInfo& MSG_ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ServerInfo_Center_2eproto.base);
  return *internal_default_instance();
}


void MSG_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.MSG_ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ports_.Clear();
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&server_id_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* MSG_ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ip(), ptr, ctx, "xsf_pb.MSG_ServerInfo.ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ports = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ports(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_ports(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.MSG_ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xsf_pb.MSG_ServerInfo.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // repeated uint32 ports = 3;
  {
    int byte_size = _ports_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_ports(), byte_size, target);
    }
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.MSG_ServerInfo)
  return target;
}

size_t MSG_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.MSG_ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ports = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ports_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ports_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  // uint32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.MSG_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.MSG_ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.MSG_ServerInfo)
    MergeFrom(*source);
  }
}

void MSG_ServerInfo::MergeFrom(const MSG_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.MSG_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ports_.MergeFrom(from.ports_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void MSG_ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.MSG_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ServerInfo::CopyFrom(const MSG_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.MSG_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ServerInfo::IsInitialized() const {
  return true;
}

void MSG_ServerInfo::InternalSwap(MSG_ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ports_.InternalSwap(&other->ports_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_id_, other->server_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cc_C_ServerInfo::InitAsDefaultInstance() {
}
class Cc_C_ServerInfo::_Internal {
 public:
};

Cc_C_ServerInfo::Cc_C_ServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Cc_C_ServerInfo)
}
Cc_C_ServerInfo::Cc_C_ServerInfo(const Cc_C_ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Cc_C_ServerInfo)
}

void Cc_C_ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Cc_C_ServerInfo_Center_2eproto.base);
}

Cc_C_ServerInfo::~Cc_C_ServerInfo() {
  // @@protoc_insertion_point(destructor:xsf_pb.Cc_C_ServerInfo)
  SharedDtor();
}

void Cc_C_ServerInfo::SharedDtor() {
}

void Cc_C_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cc_C_ServerInfo& Cc_C_ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cc_C_ServerInfo_Center_2eproto.base);
  return *internal_default_instance();
}


void Cc_C_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Cc_C_ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* Cc_C_ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xsf_pb.MSG_ServerInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cc_C_ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Cc_C_ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xsf_pb.MSG_ServerInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Cc_C_ServerInfo)
  return target;
}

size_t Cc_C_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Cc_C_ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xsf_pb.MSG_ServerInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cc_C_ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Cc_C_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Cc_C_ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cc_C_ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Cc_C_ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Cc_C_ServerInfo)
    MergeFrom(*source);
  }
}

void Cc_C_ServerInfo::MergeFrom(const Cc_C_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Cc_C_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void Cc_C_ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Cc_C_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cc_C_ServerInfo::CopyFrom(const Cc_C_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Cc_C_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cc_C_ServerInfo::IsInitialized() const {
  return true;
}

void Cc_C_ServerInfo::InternalSwap(Cc_C_ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cc_C_ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C_Cc_ServerInfo::InitAsDefaultInstance() {
}
class C_Cc_ServerInfo::_Internal {
 public:
};

C_Cc_ServerInfo::C_Cc_ServerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.C_Cc_ServerInfo)
}
C_Cc_ServerInfo::C_Cc_ServerInfo(const C_Cc_ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.C_Cc_ServerInfo)
}

void C_Cc_ServerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C_Cc_ServerInfo_Center_2eproto.base);
}

C_Cc_ServerInfo::~C_Cc_ServerInfo() {
  // @@protoc_insertion_point(destructor:xsf_pb.C_Cc_ServerInfo)
  SharedDtor();
}

void C_Cc_ServerInfo::SharedDtor() {
}

void C_Cc_ServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Cc_ServerInfo& C_Cc_ServerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Cc_ServerInfo_Center_2eproto.base);
  return *internal_default_instance();
}


void C_Cc_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.C_Cc_ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear();
}

const char* C_Cc_ServerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .xsf_pb.MSG_ServerInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Cc_ServerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.C_Cc_ServerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .xsf_pb.MSG_ServerInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.C_Cc_ServerInfo)
  return target;
}

size_t C_Cc_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.C_Cc_ServerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .xsf_pb.MSG_ServerInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Cc_ServerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.C_Cc_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Cc_ServerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Cc_ServerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.C_Cc_ServerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.C_Cc_ServerInfo)
    MergeFrom(*source);
  }
}

void C_Cc_ServerInfo::MergeFrom(const C_Cc_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.C_Cc_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void C_Cc_ServerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.C_Cc_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Cc_ServerInfo::CopyFrom(const C_Cc_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.C_Cc_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Cc_ServerInfo::IsInitialized() const {
  return true;
}

void C_Cc_ServerInfo::InternalSwap(C_Cc_ServerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Cc_ServerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cc_C_ServerLost::InitAsDefaultInstance() {
}
class Cc_C_ServerLost::_Internal {
 public:
};

Cc_C_ServerLost::Cc_C_ServerLost()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Cc_C_ServerLost)
}
Cc_C_ServerLost::Cc_C_ServerLost(const Cc_C_ServerLost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Cc_C_ServerLost)
}

void Cc_C_ServerLost::SharedCtor() {
  server_id_ = 0u;
}

Cc_C_ServerLost::~Cc_C_ServerLost() {
  // @@protoc_insertion_point(destructor:xsf_pb.Cc_C_ServerLost)
  SharedDtor();
}

void Cc_C_ServerLost::SharedDtor() {
}

void Cc_C_ServerLost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cc_C_ServerLost& Cc_C_ServerLost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cc_C_ServerLost_Center_2eproto.base);
  return *internal_default_instance();
}


void Cc_C_ServerLost::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Cc_C_ServerLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Cc_C_ServerLost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cc_C_ServerLost::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Cc_C_ServerLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Cc_C_ServerLost)
  return target;
}

size_t Cc_C_ServerLost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Cc_C_ServerLost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cc_C_ServerLost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Cc_C_ServerLost)
  GOOGLE_DCHECK_NE(&from, this);
  const Cc_C_ServerLost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cc_C_ServerLost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Cc_C_ServerLost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Cc_C_ServerLost)
    MergeFrom(*source);
  }
}

void Cc_C_ServerLost::MergeFrom(const Cc_C_ServerLost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Cc_C_ServerLost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Cc_C_ServerLost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Cc_C_ServerLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cc_C_ServerLost::CopyFrom(const Cc_C_ServerLost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Cc_C_ServerLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cc_C_ServerLost::IsInitialized() const {
  return true;
}

void Cc_C_ServerLost::InternalSwap(Cc_C_ServerLost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cc_C_ServerLost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C_Cc_ServerLost::InitAsDefaultInstance() {
}
class C_Cc_ServerLost::_Internal {
 public:
};

C_Cc_ServerLost::C_Cc_ServerLost()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.C_Cc_ServerLost)
}
C_Cc_ServerLost::C_Cc_ServerLost(const C_Cc_ServerLost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.C_Cc_ServerLost)
}

void C_Cc_ServerLost::SharedCtor() {
  server_id_ = 0u;
}

C_Cc_ServerLost::~C_Cc_ServerLost() {
  // @@protoc_insertion_point(destructor:xsf_pb.C_Cc_ServerLost)
  SharedDtor();
}

void C_Cc_ServerLost::SharedDtor() {
}

void C_Cc_ServerLost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Cc_ServerLost& C_Cc_ServerLost::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Cc_ServerLost_Center_2eproto.base);
  return *internal_default_instance();
}


void C_Cc_ServerLost::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.C_Cc_ServerLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* C_Cc_ServerLost::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Cc_ServerLost::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.C_Cc_ServerLost)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.C_Cc_ServerLost)
  return target;
}

size_t C_Cc_ServerLost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.C_Cc_ServerLost)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Cc_ServerLost::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.C_Cc_ServerLost)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Cc_ServerLost* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Cc_ServerLost>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.C_Cc_ServerLost)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.C_Cc_ServerLost)
    MergeFrom(*source);
  }
}

void C_Cc_ServerLost::MergeFrom(const C_Cc_ServerLost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.C_Cc_ServerLost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void C_Cc_ServerLost::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.C_Cc_ServerLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Cc_ServerLost::CopyFrom(const C_Cc_ServerLost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.C_Cc_ServerLost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Cc_ServerLost::IsInitialized() const {
  return true;
}

void C_Cc_ServerLost::InternalSwap(C_Cc_ServerLost* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Cc_ServerLost::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Cc_C_ServerOk::InitAsDefaultInstance() {
}
class Cc_C_ServerOk::_Internal {
 public:
};

Cc_C_ServerOk::Cc_C_ServerOk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Cc_C_ServerOk)
}
Cc_C_ServerOk::Cc_C_ServerOk(const Cc_C_ServerOk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Cc_C_ServerOk)
}

void Cc_C_ServerOk::SharedCtor() {
  server_id_ = 0u;
}

Cc_C_ServerOk::~Cc_C_ServerOk() {
  // @@protoc_insertion_point(destructor:xsf_pb.Cc_C_ServerOk)
  SharedDtor();
}

void Cc_C_ServerOk::SharedDtor() {
}

void Cc_C_ServerOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cc_C_ServerOk& Cc_C_ServerOk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Cc_C_ServerOk_Center_2eproto.base);
  return *internal_default_instance();
}


void Cc_C_ServerOk::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Cc_C_ServerOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Cc_C_ServerOk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cc_C_ServerOk::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Cc_C_ServerOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Cc_C_ServerOk)
  return target;
}

size_t Cc_C_ServerOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Cc_C_ServerOk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cc_C_ServerOk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Cc_C_ServerOk)
  GOOGLE_DCHECK_NE(&from, this);
  const Cc_C_ServerOk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cc_C_ServerOk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Cc_C_ServerOk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Cc_C_ServerOk)
    MergeFrom(*source);
  }
}

void Cc_C_ServerOk::MergeFrom(const Cc_C_ServerOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Cc_C_ServerOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Cc_C_ServerOk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Cc_C_ServerOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cc_C_ServerOk::CopyFrom(const Cc_C_ServerOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Cc_C_ServerOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cc_C_ServerOk::IsInitialized() const {
  return true;
}

void Cc_C_ServerOk::InternalSwap(Cc_C_ServerOk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cc_C_ServerOk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C_Cc_ServerOk::InitAsDefaultInstance() {
}
class C_Cc_ServerOk::_Internal {
 public:
};

C_Cc_ServerOk::C_Cc_ServerOk()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.C_Cc_ServerOk)
}
C_Cc_ServerOk::C_Cc_ServerOk(const C_Cc_ServerOk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.C_Cc_ServerOk)
}

void C_Cc_ServerOk::SharedCtor() {
  server_id_ = 0u;
}

C_Cc_ServerOk::~C_Cc_ServerOk() {
  // @@protoc_insertion_point(destructor:xsf_pb.C_Cc_ServerOk)
  SharedDtor();
}

void C_Cc_ServerOk::SharedDtor() {
}

void C_Cc_ServerOk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Cc_ServerOk& C_Cc_ServerOk::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Cc_ServerOk_Center_2eproto.base);
  return *internal_default_instance();
}


void C_Cc_ServerOk::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.C_Cc_ServerOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* C_Cc_ServerOk::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Cc_ServerOk::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.C_Cc_ServerOk)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.C_Cc_ServerOk)
  return target;
}

size_t C_Cc_ServerOk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.C_Cc_ServerOk)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Cc_ServerOk::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.C_Cc_ServerOk)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Cc_ServerOk* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Cc_ServerOk>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.C_Cc_ServerOk)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.C_Cc_ServerOk)
    MergeFrom(*source);
  }
}

void C_Cc_ServerOk::MergeFrom(const C_Cc_ServerOk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.C_Cc_ServerOk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void C_Cc_ServerOk::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.C_Cc_ServerOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Cc_ServerOk::CopyFrom(const C_Cc_ServerOk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.C_Cc_ServerOk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Cc_ServerOk::IsInitialized() const {
  return true;
}

void C_Cc_ServerOk::InternalSwap(C_Cc_ServerOk* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Cc_ServerOk::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C_Cc_Stop::InitAsDefaultInstance() {
}
class C_Cc_Stop::_Internal {
 public:
};

C_Cc_Stop::C_Cc_Stop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.C_Cc_Stop)
}
C_Cc_Stop::C_Cc_Stop(const C_Cc_Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.C_Cc_Stop)
}

void C_Cc_Stop::SharedCtor() {
}

C_Cc_Stop::~C_Cc_Stop() {
  // @@protoc_insertion_point(destructor:xsf_pb.C_Cc_Stop)
  SharedDtor();
}

void C_Cc_Stop::SharedDtor() {
}

void C_Cc_Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C_Cc_Stop& C_Cc_Stop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C_Cc_Stop_Center_2eproto.base);
  return *internal_default_instance();
}


void C_Cc_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.C_Cc_Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* C_Cc_Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C_Cc_Stop::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.C_Cc_Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.C_Cc_Stop)
  return target;
}

size_t C_Cc_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.C_Cc_Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C_Cc_Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.C_Cc_Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const C_Cc_Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C_Cc_Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.C_Cc_Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.C_Cc_Stop)
    MergeFrom(*source);
  }
}

void C_Cc_Stop::MergeFrom(const C_Cc_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.C_Cc_Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C_Cc_Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.C_Cc_Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C_Cc_Stop::CopyFrom(const C_Cc_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.C_Cc_Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Cc_Stop::IsInitialized() const {
  return true;
}

void C_Cc_Stop::InternalSwap(C_Cc_Stop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Cc_Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xsf_pb::Cc_C_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Cc_C_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Cc_C_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::C_Cc_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::C_Cc_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::C_Cc_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Cc_C_Heartbeat* Arena::CreateMaybeMessage< ::xsf_pb::Cc_C_Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Cc_C_Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::MSG_ServerInfo* Arena::CreateMaybeMessage< ::xsf_pb::MSG_ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::MSG_ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Cc_C_ServerInfo* Arena::CreateMaybeMessage< ::xsf_pb::Cc_C_ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Cc_C_ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::C_Cc_ServerInfo* Arena::CreateMaybeMessage< ::xsf_pb::C_Cc_ServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::C_Cc_ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Cc_C_ServerLost* Arena::CreateMaybeMessage< ::xsf_pb::Cc_C_ServerLost >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Cc_C_ServerLost >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::C_Cc_ServerLost* Arena::CreateMaybeMessage< ::xsf_pb::C_Cc_ServerLost >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::C_Cc_ServerLost >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Cc_C_ServerOk* Arena::CreateMaybeMessage< ::xsf_pb::Cc_C_ServerOk >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Cc_C_ServerOk >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::C_Cc_ServerOk* Arena::CreateMaybeMessage< ::xsf_pb::C_Cc_ServerOk >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::C_Cc_ServerOk >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::C_Cc_Stop* Arena::CreateMaybeMessage< ::xsf_pb::C_Cc_Stop >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::C_Cc_Stop >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

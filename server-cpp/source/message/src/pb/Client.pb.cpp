// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#include "Client.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace xsf_pb {
class Clt_Gt_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Clt_Gt_Handshake> _instance;
} _Clt_Gt_Handshake_default_instance_;
class Gt_Clt_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gt_Clt_Handshake> _instance;
} _Gt_Clt_Handshake_default_instance_;
class Clt_Gt_HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Clt_Gt_Heartbeat> _instance;
} _Clt_Gt_Heartbeat_default_instance_;
class Gt_Clt_HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gt_Clt_Heartbeat> _instance;
} _Gt_Clt_Heartbeat_default_instance_;
class Clt_G_LoginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Clt_G_Login> _instance;
} _Clt_G_Login_default_instance_;
class Gt_Clt_DisconnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Gt_Clt_Disconnect> _instance;
} _Gt_Clt_Disconnect_default_instance_;
class G_Clt_LoginResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<G_Clt_LoginResult> _instance;
} _G_Clt_LoginResult_default_instance_;
class G_Clt_TestDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<G_Clt_TestData> _instance;
} _G_Clt_TestData_default_instance_;
}  // namespace xsf_pb
static void InitDefaultsscc_info_Clt_G_Login_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Clt_G_Login_default_instance_;
    new (ptr) ::xsf_pb::Clt_G_Login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Clt_G_Login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Clt_G_Login_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Clt_G_Login_Client_2eproto}, {}};

static void InitDefaultsscc_info_Clt_Gt_Handshake_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Clt_Gt_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Clt_Gt_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Clt_Gt_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Clt_Gt_Handshake_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Clt_Gt_Handshake_Client_2eproto}, {}};

static void InitDefaultsscc_info_Clt_Gt_Heartbeat_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Clt_Gt_Heartbeat_default_instance_;
    new (ptr) ::xsf_pb::Clt_Gt_Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Clt_Gt_Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Clt_Gt_Heartbeat_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Clt_Gt_Heartbeat_Client_2eproto}, {}};

static void InitDefaultsscc_info_G_Clt_LoginResult_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_G_Clt_LoginResult_default_instance_;
    new (ptr) ::xsf_pb::G_Clt_LoginResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::G_Clt_LoginResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_G_Clt_LoginResult_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_G_Clt_LoginResult_Client_2eproto}, {}};

static void InitDefaultsscc_info_G_Clt_TestData_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_G_Clt_TestData_default_instance_;
    new (ptr) ::xsf_pb::G_Clt_TestData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::G_Clt_TestData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_G_Clt_TestData_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_G_Clt_TestData_Client_2eproto}, {}};

static void InitDefaultsscc_info_Gt_Clt_Disconnect_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Gt_Clt_Disconnect_default_instance_;
    new (ptr) ::xsf_pb::Gt_Clt_Disconnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Gt_Clt_Disconnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gt_Clt_Disconnect_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gt_Clt_Disconnect_Client_2eproto}, {}};

static void InitDefaultsscc_info_Gt_Clt_Handshake_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Gt_Clt_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Gt_Clt_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Gt_Clt_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gt_Clt_Handshake_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gt_Clt_Handshake_Client_2eproto}, {}};

static void InitDefaultsscc_info_Gt_Clt_Heartbeat_Client_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Gt_Clt_Heartbeat_default_instance_;
    new (ptr) ::xsf_pb::Gt_Clt_Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Gt_Clt_Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Gt_Clt_Heartbeat_Client_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Gt_Clt_Heartbeat_Client_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Client_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Client_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Client_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Client_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Clt_Gt_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_Clt_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Clt_Gt_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Clt_Gt_Heartbeat, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_Clt_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_Clt_Heartbeat, client_time_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_Clt_Heartbeat, server_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Clt_G_Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Clt_G_Login, account_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Clt_G_Login, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_Clt_Disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Gt_Clt_Disconnect, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::G_Clt_LoginResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::G_Clt_LoginResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::G_Clt_TestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::G_Clt_TestData, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xsf_pb::Clt_Gt_Handshake)},
  { 5, -1, sizeof(::xsf_pb::Gt_Clt_Handshake)},
  { 10, -1, sizeof(::xsf_pb::Clt_Gt_Heartbeat)},
  { 16, -1, sizeof(::xsf_pb::Gt_Clt_Heartbeat)},
  { 23, -1, sizeof(::xsf_pb::Clt_G_Login)},
  { 30, -1, sizeof(::xsf_pb::Gt_Clt_Disconnect)},
  { 36, -1, sizeof(::xsf_pb::G_Clt_LoginResult)},
  { 42, -1, sizeof(::xsf_pb::G_Clt_TestData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Clt_Gt_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Gt_Clt_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Clt_Gt_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Gt_Clt_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Clt_G_Login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Gt_Clt_Disconnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_G_Clt_LoginResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_G_Clt_TestData_default_instance_),
};

const char descriptor_table_protodef_Client_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Client.proto\022\006xsf_pb\"\022\n\020Clt_Gt_Handsha"
  "ke\"\022\n\020Gt_Clt_Handshake\" \n\020Clt_Gt_Heartbe"
  "at\022\014\n\004time\030\001 \001(\004\"<\n\020Gt_Clt_Heartbeat\022\023\n\013"
  "client_time\030\001 \001(\004\022\023\n\013server_time\030\002 \001(\004\"0"
  "\n\013Clt_G_Login\022\017\n\007account\030\001 \001(\t\022\020\n\010passwo"
  "rd\030\002 \001(\t\"#\n\021Gt_Clt_Disconnect\022\016\n\006reason\030"
  "\001 \001(\005\"#\n\021G_Clt_LoginResult\022\016\n\006result\030\001 \001"
  "(\r\"!\n\016G_Clt_TestData\022\017\n\007message\030\001 \001(\tb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Client_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Client_2eproto_sccs[8] = {
  &scc_info_Clt_G_Login_Client_2eproto.base,
  &scc_info_Clt_Gt_Handshake_Client_2eproto.base,
  &scc_info_Clt_Gt_Heartbeat_Client_2eproto.base,
  &scc_info_G_Clt_LoginResult_Client_2eproto.base,
  &scc_info_G_Clt_TestData_Client_2eproto.base,
  &scc_info_Gt_Clt_Disconnect_Client_2eproto.base,
  &scc_info_Gt_Clt_Handshake_Client_2eproto.base,
  &scc_info_Gt_Clt_Heartbeat_Client_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Client_2eproto_once;
static bool descriptor_table_Client_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_2eproto = {
  &descriptor_table_Client_2eproto_initialized, descriptor_table_protodef_Client_2eproto, "Client.proto", 325,
  &descriptor_table_Client_2eproto_once, descriptor_table_Client_2eproto_sccs, descriptor_table_Client_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_Client_2eproto::offsets,
  file_level_metadata_Client_2eproto, 8, file_level_enum_descriptors_Client_2eproto, file_level_service_descriptors_Client_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Client_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Client_2eproto), true);
namespace xsf_pb {

// ===================================================================

void Clt_Gt_Handshake::InitAsDefaultInstance() {
}
class Clt_Gt_Handshake::_Internal {
 public:
};

Clt_Gt_Handshake::Clt_Gt_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Clt_Gt_Handshake)
}
Clt_Gt_Handshake::Clt_Gt_Handshake(const Clt_Gt_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Clt_Gt_Handshake)
}

void Clt_Gt_Handshake::SharedCtor() {
}

Clt_Gt_Handshake::~Clt_Gt_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Clt_Gt_Handshake)
  SharedDtor();
}

void Clt_Gt_Handshake::SharedDtor() {
}

void Clt_Gt_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Clt_Gt_Handshake& Clt_Gt_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Clt_Gt_Handshake_Client_2eproto.base);
  return *internal_default_instance();
}


void Clt_Gt_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Clt_Gt_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Clt_Gt_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Clt_Gt_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Clt_Gt_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Clt_Gt_Handshake)
  return target;
}

size_t Clt_Gt_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Clt_Gt_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Clt_Gt_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Clt_Gt_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Clt_Gt_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Clt_Gt_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Clt_Gt_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Clt_Gt_Handshake)
    MergeFrom(*source);
  }
}

void Clt_Gt_Handshake::MergeFrom(const Clt_Gt_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Clt_Gt_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Clt_Gt_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Clt_Gt_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clt_Gt_Handshake::CopyFrom(const Clt_Gt_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Clt_Gt_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clt_Gt_Handshake::IsInitialized() const {
  return true;
}

void Clt_Gt_Handshake::InternalSwap(Clt_Gt_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Clt_Gt_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gt_Clt_Handshake::InitAsDefaultInstance() {
}
class Gt_Clt_Handshake::_Internal {
 public:
};

Gt_Clt_Handshake::Gt_Clt_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Gt_Clt_Handshake)
}
Gt_Clt_Handshake::Gt_Clt_Handshake(const Gt_Clt_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Gt_Clt_Handshake)
}

void Gt_Clt_Handshake::SharedCtor() {
}

Gt_Clt_Handshake::~Gt_Clt_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Gt_Clt_Handshake)
  SharedDtor();
}

void Gt_Clt_Handshake::SharedDtor() {
}

void Gt_Clt_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gt_Clt_Handshake& Gt_Clt_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gt_Clt_Handshake_Client_2eproto.base);
  return *internal_default_instance();
}


void Gt_Clt_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Gt_Clt_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Gt_Clt_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gt_Clt_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Gt_Clt_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Gt_Clt_Handshake)
  return target;
}

size_t Gt_Clt_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Gt_Clt_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gt_Clt_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Gt_Clt_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Gt_Clt_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gt_Clt_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Gt_Clt_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Gt_Clt_Handshake)
    MergeFrom(*source);
  }
}

void Gt_Clt_Handshake::MergeFrom(const Gt_Clt_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Gt_Clt_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Gt_Clt_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Gt_Clt_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gt_Clt_Handshake::CopyFrom(const Gt_Clt_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Gt_Clt_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gt_Clt_Handshake::IsInitialized() const {
  return true;
}

void Gt_Clt_Handshake::InternalSwap(Gt_Clt_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gt_Clt_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Clt_Gt_Heartbeat::InitAsDefaultInstance() {
}
class Clt_Gt_Heartbeat::_Internal {
 public:
};

Clt_Gt_Heartbeat::Clt_Gt_Heartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Clt_Gt_Heartbeat)
}
Clt_Gt_Heartbeat::Clt_Gt_Heartbeat(const Clt_Gt_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Clt_Gt_Heartbeat)
}

void Clt_Gt_Heartbeat::SharedCtor() {
  time_ = PROTOBUF_ULONGLONG(0);
}

Clt_Gt_Heartbeat::~Clt_Gt_Heartbeat() {
  // @@protoc_insertion_point(destructor:xsf_pb.Clt_Gt_Heartbeat)
  SharedDtor();
}

void Clt_Gt_Heartbeat::SharedDtor() {
}

void Clt_Gt_Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Clt_Gt_Heartbeat& Clt_Gt_Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Clt_Gt_Heartbeat_Client_2eproto.base);
  return *internal_default_instance();
}


void Clt_Gt_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Clt_Gt_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Clt_Gt_Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Clt_Gt_Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Clt_Gt_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Clt_Gt_Heartbeat)
  return target;
}

size_t Clt_Gt_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Clt_Gt_Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Clt_Gt_Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Clt_Gt_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Clt_Gt_Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Clt_Gt_Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Clt_Gt_Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Clt_Gt_Heartbeat)
    MergeFrom(*source);
  }
}

void Clt_Gt_Heartbeat::MergeFrom(const Clt_Gt_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Clt_Gt_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Clt_Gt_Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Clt_Gt_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clt_Gt_Heartbeat::CopyFrom(const Clt_Gt_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Clt_Gt_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clt_Gt_Heartbeat::IsInitialized() const {
  return true;
}

void Clt_Gt_Heartbeat::InternalSwap(Clt_Gt_Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Clt_Gt_Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gt_Clt_Heartbeat::InitAsDefaultInstance() {
}
class Gt_Clt_Heartbeat::_Internal {
 public:
};

Gt_Clt_Heartbeat::Gt_Clt_Heartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Gt_Clt_Heartbeat)
}
Gt_Clt_Heartbeat::Gt_Clt_Heartbeat(const Gt_Clt_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_time_, &from.client_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_time_) -
    reinterpret_cast<char*>(&client_time_)) + sizeof(server_time_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Gt_Clt_Heartbeat)
}

void Gt_Clt_Heartbeat::SharedCtor() {
  ::memset(&client_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&client_time_)) + sizeof(server_time_));
}

Gt_Clt_Heartbeat::~Gt_Clt_Heartbeat() {
  // @@protoc_insertion_point(destructor:xsf_pb.Gt_Clt_Heartbeat)
  SharedDtor();
}

void Gt_Clt_Heartbeat::SharedDtor() {
}

void Gt_Clt_Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gt_Clt_Heartbeat& Gt_Clt_Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gt_Clt_Heartbeat_Client_2eproto.base);
  return *internal_default_instance();
}


void Gt_Clt_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Gt_Clt_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&client_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_time_) -
      reinterpret_cast<char*>(&client_time_)) + sizeof(server_time_));
  _internal_metadata_.Clear();
}

const char* Gt_Clt_Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 client_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 server_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gt_Clt_Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Gt_Clt_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_time = 1;
  if (this->client_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_time(), target);
  }

  // uint64 server_time = 2;
  if (this->server_time() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_server_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Gt_Clt_Heartbeat)
  return target;
}

size_t Gt_Clt_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Gt_Clt_Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_time = 1;
  if (this->client_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_time());
  }

  // uint64 server_time = 2;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_server_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gt_Clt_Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Gt_Clt_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Gt_Clt_Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gt_Clt_Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Gt_Clt_Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Gt_Clt_Heartbeat)
    MergeFrom(*source);
  }
}

void Gt_Clt_Heartbeat::MergeFrom(const Gt_Clt_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Gt_Clt_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.client_time() != 0) {
    _internal_set_client_time(from._internal_client_time());
  }
  if (from.server_time() != 0) {
    _internal_set_server_time(from._internal_server_time());
  }
}

void Gt_Clt_Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Gt_Clt_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gt_Clt_Heartbeat::CopyFrom(const Gt_Clt_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Gt_Clt_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gt_Clt_Heartbeat::IsInitialized() const {
  return true;
}

void Gt_Clt_Heartbeat::InternalSwap(Gt_Clt_Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(client_time_, other->client_time_);
  swap(server_time_, other->server_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gt_Clt_Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Clt_G_Login::InitAsDefaultInstance() {
}
class Clt_G_Login::_Internal {
 public:
};

Clt_G_Login::Clt_G_Login()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Clt_G_Login)
}
Clt_G_Login::Clt_G_Login(const Clt_G_Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Clt_G_Login)
}

void Clt_G_Login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Clt_G_Login_Client_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Clt_G_Login::~Clt_G_Login() {
  // @@protoc_insertion_point(destructor:xsf_pb.Clt_G_Login)
  SharedDtor();
}

void Clt_G_Login::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Clt_G_Login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Clt_G_Login& Clt_G_Login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Clt_G_Login_Client_2eproto.base);
  return *internal_default_instance();
}


void Clt_G_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Clt_G_Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Clt_G_Login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_account(), ptr, ctx, "xsf_pb.Clt_G_Login.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "xsf_pb.Clt_G_Login.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Clt_G_Login::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Clt_G_Login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xsf_pb.Clt_G_Login.account");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_account(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xsf_pb.Clt_G_Login.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Clt_G_Login)
  return target;
}

size_t Clt_G_Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Clt_G_Login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Clt_G_Login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Clt_G_Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Clt_G_Login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Clt_G_Login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Clt_G_Login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Clt_G_Login)
    MergeFrom(*source);
  }
}

void Clt_G_Login::MergeFrom(const Clt_G_Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Clt_G_Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Clt_G_Login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Clt_G_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clt_G_Login::CopyFrom(const Clt_G_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Clt_G_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clt_G_Login::IsInitialized() const {
  return true;
}

void Clt_G_Login::InternalSwap(Clt_G_Login* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Clt_G_Login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Gt_Clt_Disconnect::InitAsDefaultInstance() {
}
class Gt_Clt_Disconnect::_Internal {
 public:
};

Gt_Clt_Disconnect::Gt_Clt_Disconnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Gt_Clt_Disconnect)
}
Gt_Clt_Disconnect::Gt_Clt_Disconnect(const Gt_Clt_Disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Gt_Clt_Disconnect)
}

void Gt_Clt_Disconnect::SharedCtor() {
  reason_ = 0;
}

Gt_Clt_Disconnect::~Gt_Clt_Disconnect() {
  // @@protoc_insertion_point(destructor:xsf_pb.Gt_Clt_Disconnect)
  SharedDtor();
}

void Gt_Clt_Disconnect::SharedDtor() {
}

void Gt_Clt_Disconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Gt_Clt_Disconnect& Gt_Clt_Disconnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Gt_Clt_Disconnect_Client_2eproto.base);
  return *internal_default_instance();
}


void Gt_Clt_Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Gt_Clt_Disconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear();
}

const char* Gt_Clt_Disconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gt_Clt_Disconnect::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Gt_Clt_Disconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Gt_Clt_Disconnect)
  return target;
}

size_t Gt_Clt_Disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Gt_Clt_Disconnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gt_Clt_Disconnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Gt_Clt_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const Gt_Clt_Disconnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gt_Clt_Disconnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Gt_Clt_Disconnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Gt_Clt_Disconnect)
    MergeFrom(*source);
  }
}

void Gt_Clt_Disconnect::MergeFrom(const Gt_Clt_Disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Gt_Clt_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void Gt_Clt_Disconnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Gt_Clt_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gt_Clt_Disconnect::CopyFrom(const Gt_Clt_Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Gt_Clt_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gt_Clt_Disconnect::IsInitialized() const {
  return true;
}

void Gt_Clt_Disconnect::InternalSwap(Gt_Clt_Disconnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gt_Clt_Disconnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void G_Clt_LoginResult::InitAsDefaultInstance() {
}
class G_Clt_LoginResult::_Internal {
 public:
};

G_Clt_LoginResult::G_Clt_LoginResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.G_Clt_LoginResult)
}
G_Clt_LoginResult::G_Clt_LoginResult(const G_Clt_LoginResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.G_Clt_LoginResult)
}

void G_Clt_LoginResult::SharedCtor() {
  result_ = 0u;
}

G_Clt_LoginResult::~G_Clt_LoginResult() {
  // @@protoc_insertion_point(destructor:xsf_pb.G_Clt_LoginResult)
  SharedDtor();
}

void G_Clt_LoginResult::SharedDtor() {
}

void G_Clt_LoginResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const G_Clt_LoginResult& G_Clt_LoginResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_G_Clt_LoginResult_Client_2eproto.base);
  return *internal_default_instance();
}


void G_Clt_LoginResult::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.G_Clt_LoginResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

const char* G_Clt_LoginResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* G_Clt_LoginResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.G_Clt_LoginResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.G_Clt_LoginResult)
  return target;
}

size_t G_Clt_LoginResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.G_Clt_LoginResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void G_Clt_LoginResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.G_Clt_LoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  const G_Clt_LoginResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<G_Clt_LoginResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.G_Clt_LoginResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.G_Clt_LoginResult)
    MergeFrom(*source);
  }
}

void G_Clt_LoginResult::MergeFrom(const G_Clt_LoginResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.G_Clt_LoginResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void G_Clt_LoginResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.G_Clt_LoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void G_Clt_LoginResult::CopyFrom(const G_Clt_LoginResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.G_Clt_LoginResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool G_Clt_LoginResult::IsInitialized() const {
  return true;
}

void G_Clt_LoginResult::InternalSwap(G_Clt_LoginResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata G_Clt_LoginResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void G_Clt_TestData::InitAsDefaultInstance() {
}
class G_Clt_TestData::_Internal {
 public:
};

G_Clt_TestData::G_Clt_TestData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.G_Clt_TestData)
}
G_Clt_TestData::G_Clt_TestData(const G_Clt_TestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:xsf_pb.G_Clt_TestData)
}

void G_Clt_TestData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_G_Clt_TestData_Client_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

G_Clt_TestData::~G_Clt_TestData() {
  // @@protoc_insertion_point(destructor:xsf_pb.G_Clt_TestData)
  SharedDtor();
}

void G_Clt_TestData::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void G_Clt_TestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const G_Clt_TestData& G_Clt_TestData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_G_Clt_TestData_Client_2eproto.base);
  return *internal_default_instance();
}


void G_Clt_TestData::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.G_Clt_TestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* G_Clt_TestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message(), ptr, ctx, "xsf_pb.G_Clt_TestData.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* G_Clt_TestData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.G_Clt_TestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "xsf_pb.G_Clt_TestData.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.G_Clt_TestData)
  return target;
}

size_t G_Clt_TestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.G_Clt_TestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void G_Clt_TestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.G_Clt_TestData)
  GOOGLE_DCHECK_NE(&from, this);
  const G_Clt_TestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<G_Clt_TestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.G_Clt_TestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.G_Clt_TestData)
    MergeFrom(*source);
  }
}

void G_Clt_TestData::MergeFrom(const G_Clt_TestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.G_Clt_TestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void G_Clt_TestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.G_Clt_TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void G_Clt_TestData::CopyFrom(const G_Clt_TestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.G_Clt_TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool G_Clt_TestData::IsInitialized() const {
  return true;
}

void G_Clt_TestData::InternalSwap(G_Clt_TestData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata G_Clt_TestData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xsf_pb::Clt_Gt_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Clt_Gt_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Clt_Gt_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Gt_Clt_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Gt_Clt_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Gt_Clt_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Clt_Gt_Heartbeat* Arena::CreateMaybeMessage< ::xsf_pb::Clt_Gt_Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Clt_Gt_Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Gt_Clt_Heartbeat* Arena::CreateMaybeMessage< ::xsf_pb::Gt_Clt_Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Gt_Clt_Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Clt_G_Login* Arena::CreateMaybeMessage< ::xsf_pb::Clt_G_Login >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Clt_G_Login >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Gt_Clt_Disconnect* Arena::CreateMaybeMessage< ::xsf_pb::Gt_Clt_Disconnect >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Gt_Clt_Disconnect >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::G_Clt_LoginResult* Arena::CreateMaybeMessage< ::xsf_pb::G_Clt_LoginResult >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::G_Clt_LoginResult >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::G_Clt_TestData* Arena::CreateMaybeMessage< ::xsf_pb::G_Clt_TestData >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::G_Clt_TestData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

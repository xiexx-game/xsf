// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DB.proto

#include "DB.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace xsf_pb {
class Dbc_Db_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dbc_Db_Handshake> _instance;
} _Dbc_Db_Handshake_default_instance_;
class Db_Dbc_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Db_Dbc_Handshake> _instance;
} _Db_Dbc_Handshake_default_instance_;
class Dbc_Db_HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dbc_Db_Heartbeat> _instance;
} _Dbc_Db_Heartbeat_default_instance_;
class Dbc_Db_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dbc_Db_Request> _instance;
} _Dbc_Db_Request_default_instance_;
class Db_Dbc_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Db_Dbc_Response> _instance;
} _Db_Dbc_Response_default_instance_;
}  // namespace xsf_pb
static void InitDefaultsscc_info_Db_Dbc_Handshake_DB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Db_Dbc_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Db_Dbc_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Db_Dbc_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Db_Dbc_Handshake_DB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Db_Dbc_Handshake_DB_2eproto}, {}};

static void InitDefaultsscc_info_Db_Dbc_Response_DB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Db_Dbc_Response_default_instance_;
    new (ptr) ::xsf_pb::Db_Dbc_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Db_Dbc_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Db_Dbc_Response_DB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Db_Dbc_Response_DB_2eproto}, {}};

static void InitDefaultsscc_info_Dbc_Db_Handshake_DB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Dbc_Db_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Dbc_Db_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Dbc_Db_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dbc_Db_Handshake_DB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dbc_Db_Handshake_DB_2eproto}, {}};

static void InitDefaultsscc_info_Dbc_Db_Heartbeat_DB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Dbc_Db_Heartbeat_default_instance_;
    new (ptr) ::xsf_pb::Dbc_Db_Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Dbc_Db_Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dbc_Db_Heartbeat_DB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dbc_Db_Heartbeat_DB_2eproto}, {}};

static void InitDefaultsscc_info_Dbc_Db_Request_DB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Dbc_Db_Request_default_instance_;
    new (ptr) ::xsf_pb::Dbc_Db_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Dbc_Db_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dbc_Db_Request_DB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dbc_Db_Request_DB_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DB_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DB_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DB_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Handshake, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Handshake, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Request, serial_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Request, db_request_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Request, queue_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Dbc_Db_Request, datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Response, serial_id_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Response, code_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Response, total_),
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Db_Dbc_Response, datas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xsf_pb::Dbc_Db_Handshake)},
  { 6, -1, sizeof(::xsf_pb::Db_Dbc_Handshake)},
  { 12, -1, sizeof(::xsf_pb::Dbc_Db_Heartbeat)},
  { 17, -1, sizeof(::xsf_pb::Dbc_Db_Request)},
  { 26, -1, sizeof(::xsf_pb::Db_Dbc_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Dbc_Db_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Db_Dbc_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Dbc_Db_Heartbeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Dbc_Db_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Db_Dbc_Response_default_instance_),
};

const char descriptor_table_protodef_DB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010DB.proto\022\006xsf_pb\"%\n\020Dbc_Db_Handshake\022\021"
  "\n\tserver_id\030\001 \001(\r\"%\n\020Db_Dbc_Handshake\022\021\n"
  "\tserver_id\030\001 \001(\r\"\022\n\020Dbc_Db_Heartbeat\"[\n\016"
  "Dbc_Db_Request\022\021\n\tserial_id\030\001 \001(\004\022\025\n\rdb_"
  "request_id\030\002 \001(\r\022\020\n\010queue_id\030\003 \001(\r\022\r\n\005da"
  "tas\030\004 \001(\014\"P\n\017Db_Dbc_Response\022\021\n\tserial_i"
  "d\030\001 \001(\004\022\014\n\004code\030\002 \001(\r\022\r\n\005total\030\003 \001(\r\022\r\n\005"
  "datas\030\004 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DB_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DB_2eproto_sccs[5] = {
  &scc_info_Db_Dbc_Handshake_DB_2eproto.base,
  &scc_info_Db_Dbc_Response_DB_2eproto.base,
  &scc_info_Dbc_Db_Handshake_DB_2eproto.base,
  &scc_info_Dbc_Db_Heartbeat_DB_2eproto.base,
  &scc_info_Dbc_Db_Request_DB_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DB_2eproto_once;
static bool descriptor_table_DB_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DB_2eproto = {
  &descriptor_table_DB_2eproto_initialized, descriptor_table_protodef_DB_2eproto, "DB.proto", 299,
  &descriptor_table_DB_2eproto_once, descriptor_table_DB_2eproto_sccs, descriptor_table_DB_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_DB_2eproto::offsets,
  file_level_metadata_DB_2eproto, 5, file_level_enum_descriptors_DB_2eproto, file_level_service_descriptors_DB_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DB_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DB_2eproto), true);
namespace xsf_pb {

// ===================================================================

void Dbc_Db_Handshake::InitAsDefaultInstance() {
}
class Dbc_Db_Handshake::_Internal {
 public:
};

Dbc_Db_Handshake::Dbc_Db_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Dbc_Db_Handshake)
}
Dbc_Db_Handshake::Dbc_Db_Handshake(const Dbc_Db_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Dbc_Db_Handshake)
}

void Dbc_Db_Handshake::SharedCtor() {
  server_id_ = 0u;
}

Dbc_Db_Handshake::~Dbc_Db_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Dbc_Db_Handshake)
  SharedDtor();
}

void Dbc_Db_Handshake::SharedDtor() {
}

void Dbc_Db_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dbc_Db_Handshake& Dbc_Db_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dbc_Db_Handshake_DB_2eproto.base);
  return *internal_default_instance();
}


void Dbc_Db_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Dbc_Db_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Dbc_Db_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dbc_Db_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Dbc_Db_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Dbc_Db_Handshake)
  return target;
}

size_t Dbc_Db_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Dbc_Db_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dbc_Db_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Dbc_Db_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Dbc_Db_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dbc_Db_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Dbc_Db_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Dbc_Db_Handshake)
    MergeFrom(*source);
  }
}

void Dbc_Db_Handshake::MergeFrom(const Dbc_Db_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Dbc_Db_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Dbc_Db_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Dbc_Db_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dbc_Db_Handshake::CopyFrom(const Dbc_Db_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Dbc_Db_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dbc_Db_Handshake::IsInitialized() const {
  return true;
}

void Dbc_Db_Handshake::InternalSwap(Dbc_Db_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dbc_Db_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Db_Dbc_Handshake::InitAsDefaultInstance() {
}
class Db_Dbc_Handshake::_Internal {
 public:
};

Db_Dbc_Handshake::Db_Dbc_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Db_Dbc_Handshake)
}
Db_Dbc_Handshake::Db_Dbc_Handshake(const Db_Dbc_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Db_Dbc_Handshake)
}

void Db_Dbc_Handshake::SharedCtor() {
  server_id_ = 0u;
}

Db_Dbc_Handshake::~Db_Dbc_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Db_Dbc_Handshake)
  SharedDtor();
}

void Db_Dbc_Handshake::SharedDtor() {
}

void Db_Dbc_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Db_Dbc_Handshake& Db_Dbc_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Db_Dbc_Handshake_DB_2eproto.base);
  return *internal_default_instance();
}


void Db_Dbc_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Db_Dbc_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Db_Dbc_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Db_Dbc_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Db_Dbc_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Db_Dbc_Handshake)
  return target;
}

size_t Db_Dbc_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Db_Dbc_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Db_Dbc_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Db_Dbc_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Db_Dbc_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Db_Dbc_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Db_Dbc_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Db_Dbc_Handshake)
    MergeFrom(*source);
  }
}

void Db_Dbc_Handshake::MergeFrom(const Db_Dbc_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Db_Dbc_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Db_Dbc_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Db_Dbc_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Db_Dbc_Handshake::CopyFrom(const Db_Dbc_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Db_Dbc_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Db_Dbc_Handshake::IsInitialized() const {
  return true;
}

void Db_Dbc_Handshake::InternalSwap(Db_Dbc_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Db_Dbc_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dbc_Db_Heartbeat::InitAsDefaultInstance() {
}
class Dbc_Db_Heartbeat::_Internal {
 public:
};

Dbc_Db_Heartbeat::Dbc_Db_Heartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Dbc_Db_Heartbeat)
}
Dbc_Db_Heartbeat::Dbc_Db_Heartbeat(const Dbc_Db_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Dbc_Db_Heartbeat)
}

void Dbc_Db_Heartbeat::SharedCtor() {
}

Dbc_Db_Heartbeat::~Dbc_Db_Heartbeat() {
  // @@protoc_insertion_point(destructor:xsf_pb.Dbc_Db_Heartbeat)
  SharedDtor();
}

void Dbc_Db_Heartbeat::SharedDtor() {
}

void Dbc_Db_Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dbc_Db_Heartbeat& Dbc_Db_Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dbc_Db_Heartbeat_DB_2eproto.base);
  return *internal_default_instance();
}


void Dbc_Db_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Dbc_Db_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Dbc_Db_Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dbc_Db_Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Dbc_Db_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Dbc_Db_Heartbeat)
  return target;
}

size_t Dbc_Db_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Dbc_Db_Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dbc_Db_Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Dbc_Db_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Dbc_Db_Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dbc_Db_Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Dbc_Db_Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Dbc_Db_Heartbeat)
    MergeFrom(*source);
  }
}

void Dbc_Db_Heartbeat::MergeFrom(const Dbc_Db_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Dbc_Db_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Dbc_Db_Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Dbc_Db_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dbc_Db_Heartbeat::CopyFrom(const Dbc_Db_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Dbc_Db_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dbc_Db_Heartbeat::IsInitialized() const {
  return true;
}

void Dbc_Db_Heartbeat::InternalSwap(Dbc_Db_Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dbc_Db_Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dbc_Db_Request::InitAsDefaultInstance() {
}
class Dbc_Db_Request::_Internal {
 public:
};

Dbc_Db_Request::Dbc_Db_Request()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Dbc_Db_Request)
}
Dbc_Db_Request::Dbc_Db_Request(const Dbc_Db_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datas().empty()) {
    datas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datas_);
  }
  ::memcpy(&serial_id_, &from.serial_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_id_) -
    reinterpret_cast<char*>(&serial_id_)) + sizeof(queue_id_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Dbc_Db_Request)
}

void Dbc_Db_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dbc_Db_Request_DB_2eproto.base);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_id_) -
      reinterpret_cast<char*>(&serial_id_)) + sizeof(queue_id_));
}

Dbc_Db_Request::~Dbc_Db_Request() {
  // @@protoc_insertion_point(destructor:xsf_pb.Dbc_Db_Request)
  SharedDtor();
}

void Dbc_Db_Request::SharedDtor() {
  datas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Dbc_Db_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dbc_Db_Request& Dbc_Db_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dbc_Db_Request_DB_2eproto.base);
  return *internal_default_instance();
}


void Dbc_Db_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Dbc_Db_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_id_) -
      reinterpret_cast<char*>(&serial_id_)) + sizeof(queue_id_));
  _internal_metadata_.Clear();
}

const char* Dbc_Db_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 serial_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 db_request_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          db_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 queue_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          queue_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_datas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dbc_Db_Request::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Dbc_Db_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_id = 1;
  if (this->serial_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_serial_id(), target);
  }

  // uint32 db_request_id = 2;
  if (this->db_request_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_db_request_id(), target);
  }

  // uint32 queue_id = 3;
  if (this->queue_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_queue_id(), target);
  }

  // bytes datas = 4;
  if (this->datas().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_datas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Dbc_Db_Request)
  return target;
}

size_t Dbc_Db_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Dbc_Db_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes datas = 4;
  if (this->datas().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_datas());
  }

  // uint64 serial_id = 1;
  if (this->serial_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_serial_id());
  }

  // uint32 db_request_id = 2;
  if (this->db_request_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_db_request_id());
  }

  // uint32 queue_id = 3;
  if (this->queue_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_queue_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dbc_Db_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Dbc_Db_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Dbc_Db_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dbc_Db_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Dbc_Db_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Dbc_Db_Request)
    MergeFrom(*source);
  }
}

void Dbc_Db_Request::MergeFrom(const Dbc_Db_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Dbc_Db_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datas().size() > 0) {

    datas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datas_);
  }
  if (from.serial_id() != 0) {
    _internal_set_serial_id(from._internal_serial_id());
  }
  if (from.db_request_id() != 0) {
    _internal_set_db_request_id(from._internal_db_request_id());
  }
  if (from.queue_id() != 0) {
    _internal_set_queue_id(from._internal_queue_id());
  }
}

void Dbc_Db_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Dbc_Db_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dbc_Db_Request::CopyFrom(const Dbc_Db_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Dbc_Db_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dbc_Db_Request::IsInitialized() const {
  return true;
}

void Dbc_Db_Request::InternalSwap(Dbc_Db_Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datas_.Swap(&other->datas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serial_id_, other->serial_id_);
  swap(db_request_id_, other->db_request_id_);
  swap(queue_id_, other->queue_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dbc_Db_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Db_Dbc_Response::InitAsDefaultInstance() {
}
class Db_Dbc_Response::_Internal {
 public:
};

Db_Dbc_Response::Db_Dbc_Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Db_Dbc_Response)
}
Db_Dbc_Response::Db_Dbc_Response(const Db_Dbc_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datas().empty()) {
    datas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datas_);
  }
  ::memcpy(&serial_id_, &from.serial_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&serial_id_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Db_Dbc_Response)
}

void Db_Dbc_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Db_Dbc_Response_DB_2eproto.base);
  datas_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&serial_id_)) + sizeof(total_));
}

Db_Dbc_Response::~Db_Dbc_Response() {
  // @@protoc_insertion_point(destructor:xsf_pb.Db_Dbc_Response)
  SharedDtor();
}

void Db_Dbc_Response::SharedDtor() {
  datas_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Db_Dbc_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Db_Dbc_Response& Db_Dbc_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Db_Dbc_Response_DB_2eproto.base);
  return *internal_default_instance();
}


void Db_Dbc_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Db_Dbc_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&serial_id_)) + sizeof(total_));
  _internal_metadata_.Clear();
}

const char* Db_Dbc_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 serial_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_datas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Db_Dbc_Response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Db_Dbc_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 serial_id = 1;
  if (this->serial_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_serial_id(), target);
  }

  // uint32 code = 2;
  if (this->code() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_code(), target);
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total(), target);
  }

  // bytes datas = 4;
  if (this->datas().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_datas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Db_Dbc_Response)
  return target;
}

size_t Db_Dbc_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Db_Dbc_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes datas = 4;
  if (this->datas().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_datas());
  }

  // uint64 serial_id = 1;
  if (this->serial_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_serial_id());
  }

  // uint32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_code());
  }

  // uint32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Db_Dbc_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Db_Dbc_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Db_Dbc_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Db_Dbc_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Db_Dbc_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Db_Dbc_Response)
    MergeFrom(*source);
  }
}

void Db_Dbc_Response::MergeFrom(const Db_Dbc_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Db_Dbc_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datas().size() > 0) {

    datas_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datas_);
  }
  if (from.serial_id() != 0) {
    _internal_set_serial_id(from._internal_serial_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void Db_Dbc_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Db_Dbc_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Db_Dbc_Response::CopyFrom(const Db_Dbc_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Db_Dbc_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Db_Dbc_Response::IsInitialized() const {
  return true;
}

void Db_Dbc_Response::InternalSwap(Db_Dbc_Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datas_.Swap(&other->datas_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serial_id_, other->serial_id_);
  swap(code_, other->code_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Db_Dbc_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xsf_pb::Dbc_Db_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Dbc_Db_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Dbc_Db_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Db_Dbc_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Db_Dbc_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Db_Dbc_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Dbc_Db_Heartbeat* Arena::CreateMaybeMessage< ::xsf_pb::Dbc_Db_Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Dbc_Db_Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Dbc_Db_Request* Arena::CreateMaybeMessage< ::xsf_pb::Dbc_Db_Request >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Dbc_Db_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Db_Dbc_Response* Arena::CreateMaybeMessage< ::xsf_pb::Db_Dbc_Response >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Db_Dbc_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hub.proto

#include "Hub.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace xsf_pb {
class Hc_H_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hc_H_Handshake> _instance;
} _Hc_H_Handshake_default_instance_;
class H_Hc_HandshakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<H_Hc_Handshake> _instance;
} _H_Hc_Handshake_default_instance_;
class Hc_H_HeartbeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hc_H_Heartbeat> _instance;
} _Hc_H_Heartbeat_default_instance_;
}  // namespace xsf_pb
static void InitDefaultsscc_info_H_Hc_Handshake_Hub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_H_Hc_Handshake_default_instance_;
    new (ptr) ::xsf_pb::H_Hc_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::H_Hc_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_H_Hc_Handshake_Hub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_H_Hc_Handshake_Hub_2eproto}, {}};

static void InitDefaultsscc_info_Hc_H_Handshake_Hub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Hc_H_Handshake_default_instance_;
    new (ptr) ::xsf_pb::Hc_H_Handshake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Hc_H_Handshake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hc_H_Handshake_Hub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hc_H_Handshake_Hub_2eproto}, {}};

static void InitDefaultsscc_info_Hc_H_Heartbeat_Hub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::xsf_pb::_Hc_H_Heartbeat_default_instance_;
    new (ptr) ::xsf_pb::Hc_H_Heartbeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::xsf_pb::Hc_H_Heartbeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hc_H_Heartbeat_Hub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hc_H_Heartbeat_Hub_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Hub_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Hub_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Hub_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Hub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Hc_H_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Hc_H_Handshake, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::H_Hc_Handshake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::H_Hc_Handshake, server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::xsf_pb::Hc_H_Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::xsf_pb::Hc_H_Handshake)},
  { 6, -1, sizeof(::xsf_pb::H_Hc_Handshake)},
  { 12, -1, sizeof(::xsf_pb::Hc_H_Heartbeat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Hc_H_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_H_Hc_Handshake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::xsf_pb::_Hc_H_Heartbeat_default_instance_),
};

const char descriptor_table_protodef_Hub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tHub.proto\022\006xsf_pb\"#\n\016Hc_H_Handshake\022\021\n"
  "\tserver_id\030\001 \001(\r\"#\n\016H_Hc_Handshake\022\021\n\tse"
  "rver_id\030\001 \001(\r\"\020\n\016Hc_H_Heartbeatb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Hub_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Hub_2eproto_sccs[3] = {
  &scc_info_H_Hc_Handshake_Hub_2eproto.base,
  &scc_info_Hc_H_Handshake_Hub_2eproto.base,
  &scc_info_Hc_H_Heartbeat_Hub_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Hub_2eproto_once;
static bool descriptor_table_Hub_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Hub_2eproto = {
  &descriptor_table_Hub_2eproto_initialized, descriptor_table_protodef_Hub_2eproto, "Hub.proto", 119,
  &descriptor_table_Hub_2eproto_once, descriptor_table_Hub_2eproto_sccs, descriptor_table_Hub_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Hub_2eproto::offsets,
  file_level_metadata_Hub_2eproto, 3, file_level_enum_descriptors_Hub_2eproto, file_level_service_descriptors_Hub_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Hub_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Hub_2eproto), true);
namespace xsf_pb {

// ===================================================================

void Hc_H_Handshake::InitAsDefaultInstance() {
}
class Hc_H_Handshake::_Internal {
 public:
};

Hc_H_Handshake::Hc_H_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Hc_H_Handshake)
}
Hc_H_Handshake::Hc_H_Handshake(const Hc_H_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Hc_H_Handshake)
}

void Hc_H_Handshake::SharedCtor() {
  server_id_ = 0u;
}

Hc_H_Handshake::~Hc_H_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.Hc_H_Handshake)
  SharedDtor();
}

void Hc_H_Handshake::SharedDtor() {
}

void Hc_H_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hc_H_Handshake& Hc_H_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hc_H_Handshake_Hub_2eproto.base);
  return *internal_default_instance();
}


void Hc_H_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Hc_H_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* Hc_H_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hc_H_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Hc_H_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Hc_H_Handshake)
  return target;
}

size_t Hc_H_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Hc_H_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hc_H_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Hc_H_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const Hc_H_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hc_H_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Hc_H_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Hc_H_Handshake)
    MergeFrom(*source);
  }
}

void Hc_H_Handshake::MergeFrom(const Hc_H_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Hc_H_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void Hc_H_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Hc_H_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hc_H_Handshake::CopyFrom(const Hc_H_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Hc_H_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hc_H_Handshake::IsInitialized() const {
  return true;
}

void Hc_H_Handshake::InternalSwap(Hc_H_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hc_H_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void H_Hc_Handshake::InitAsDefaultInstance() {
}
class H_Hc_Handshake::_Internal {
 public:
};

H_Hc_Handshake::H_Hc_Handshake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.H_Hc_Handshake)
}
H_Hc_Handshake::H_Hc_Handshake(const H_Hc_Handshake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_id_ = from.server_id_;
  // @@protoc_insertion_point(copy_constructor:xsf_pb.H_Hc_Handshake)
}

void H_Hc_Handshake::SharedCtor() {
  server_id_ = 0u;
}

H_Hc_Handshake::~H_Hc_Handshake() {
  // @@protoc_insertion_point(destructor:xsf_pb.H_Hc_Handshake)
  SharedDtor();
}

void H_Hc_Handshake::SharedDtor() {
}

void H_Hc_Handshake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const H_Hc_Handshake& H_Hc_Handshake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_H_Hc_Handshake_Hub_2eproto.base);
  return *internal_default_instance();
}


void H_Hc_Handshake::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.H_Hc_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* H_Hc_Handshake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* H_Hc_Handshake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.H_Hc_Handshake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.H_Hc_Handshake)
  return target;
}

size_t H_Hc_Handshake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.H_Hc_Handshake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 server_id = 1;
  if (this->server_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_server_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void H_Hc_Handshake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.H_Hc_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  const H_Hc_Handshake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<H_Hc_Handshake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.H_Hc_Handshake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.H_Hc_Handshake)
    MergeFrom(*source);
  }
}

void H_Hc_Handshake::MergeFrom(const H_Hc_Handshake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.H_Hc_Handshake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_id() != 0) {
    _internal_set_server_id(from._internal_server_id());
  }
}

void H_Hc_Handshake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.H_Hc_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void H_Hc_Handshake::CopyFrom(const H_Hc_Handshake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.H_Hc_Handshake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H_Hc_Handshake::IsInitialized() const {
  return true;
}

void H_Hc_Handshake::InternalSwap(H_Hc_Handshake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(server_id_, other->server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata H_Hc_Handshake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hc_H_Heartbeat::InitAsDefaultInstance() {
}
class Hc_H_Heartbeat::_Internal {
 public:
};

Hc_H_Heartbeat::Hc_H_Heartbeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xsf_pb.Hc_H_Heartbeat)
}
Hc_H_Heartbeat::Hc_H_Heartbeat(const Hc_H_Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:xsf_pb.Hc_H_Heartbeat)
}

void Hc_H_Heartbeat::SharedCtor() {
}

Hc_H_Heartbeat::~Hc_H_Heartbeat() {
  // @@protoc_insertion_point(destructor:xsf_pb.Hc_H_Heartbeat)
  SharedDtor();
}

void Hc_H_Heartbeat::SharedDtor() {
}

void Hc_H_Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hc_H_Heartbeat& Hc_H_Heartbeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hc_H_Heartbeat_Hub_2eproto.base);
  return *internal_default_instance();
}


void Hc_H_Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:xsf_pb.Hc_H_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* Hc_H_Heartbeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hc_H_Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:xsf_pb.Hc_H_Heartbeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xsf_pb.Hc_H_Heartbeat)
  return target;
}

size_t Hc_H_Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xsf_pb.Hc_H_Heartbeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hc_H_Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xsf_pb.Hc_H_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Hc_H_Heartbeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hc_H_Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xsf_pb.Hc_H_Heartbeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xsf_pb.Hc_H_Heartbeat)
    MergeFrom(*source);
  }
}

void Hc_H_Heartbeat::MergeFrom(const Hc_H_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xsf_pb.Hc_H_Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Hc_H_Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xsf_pb.Hc_H_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hc_H_Heartbeat::CopyFrom(const Hc_H_Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xsf_pb.Hc_H_Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hc_H_Heartbeat::IsInitialized() const {
  return true;
}

void Hc_H_Heartbeat::InternalSwap(Hc_H_Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hc_H_Heartbeat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::xsf_pb::Hc_H_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::Hc_H_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Hc_H_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::H_Hc_Handshake* Arena::CreateMaybeMessage< ::xsf_pb::H_Hc_Handshake >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::H_Hc_Handshake >(arena);
}
template<> PROTOBUF_NOINLINE ::xsf_pb::Hc_H_Heartbeat* Arena::CreateMaybeMessage< ::xsf_pb::Hc_H_Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::xsf_pb::Hc_H_Heartbeat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

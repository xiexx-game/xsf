// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Center.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Center_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Center_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Center_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Center_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Center_2eproto;
namespace xsf_pb {
class C_Cc_Handshake;
class C_Cc_HandshakeDefaultTypeInternal;
extern C_Cc_HandshakeDefaultTypeInternal _C_Cc_Handshake_default_instance_;
class C_Cc_ServerInfo;
class C_Cc_ServerInfoDefaultTypeInternal;
extern C_Cc_ServerInfoDefaultTypeInternal _C_Cc_ServerInfo_default_instance_;
class C_Cc_ServerLost;
class C_Cc_ServerLostDefaultTypeInternal;
extern C_Cc_ServerLostDefaultTypeInternal _C_Cc_ServerLost_default_instance_;
class C_Cc_ServerOk;
class C_Cc_ServerOkDefaultTypeInternal;
extern C_Cc_ServerOkDefaultTypeInternal _C_Cc_ServerOk_default_instance_;
class C_Cc_Stop;
class C_Cc_StopDefaultTypeInternal;
extern C_Cc_StopDefaultTypeInternal _C_Cc_Stop_default_instance_;
class Cc_C_Handshake;
class Cc_C_HandshakeDefaultTypeInternal;
extern Cc_C_HandshakeDefaultTypeInternal _Cc_C_Handshake_default_instance_;
class Cc_C_Heartbeat;
class Cc_C_HeartbeatDefaultTypeInternal;
extern Cc_C_HeartbeatDefaultTypeInternal _Cc_C_Heartbeat_default_instance_;
class Cc_C_ServerInfo;
class Cc_C_ServerInfoDefaultTypeInternal;
extern Cc_C_ServerInfoDefaultTypeInternal _Cc_C_ServerInfo_default_instance_;
class Cc_C_ServerLost;
class Cc_C_ServerLostDefaultTypeInternal;
extern Cc_C_ServerLostDefaultTypeInternal _Cc_C_ServerLost_default_instance_;
class Cc_C_ServerOk;
class Cc_C_ServerOkDefaultTypeInternal;
extern Cc_C_ServerOkDefaultTypeInternal _Cc_C_ServerOk_default_instance_;
class MSG_ServerInfo;
class MSG_ServerInfoDefaultTypeInternal;
extern MSG_ServerInfoDefaultTypeInternal _MSG_ServerInfo_default_instance_;
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::xsf_pb::C_Cc_Handshake* Arena::CreateMaybeMessage<::xsf_pb::C_Cc_Handshake>(Arena*);
template<> ::xsf_pb::C_Cc_ServerInfo* Arena::CreateMaybeMessage<::xsf_pb::C_Cc_ServerInfo>(Arena*);
template<> ::xsf_pb::C_Cc_ServerLost* Arena::CreateMaybeMessage<::xsf_pb::C_Cc_ServerLost>(Arena*);
template<> ::xsf_pb::C_Cc_ServerOk* Arena::CreateMaybeMessage<::xsf_pb::C_Cc_ServerOk>(Arena*);
template<> ::xsf_pb::C_Cc_Stop* Arena::CreateMaybeMessage<::xsf_pb::C_Cc_Stop>(Arena*);
template<> ::xsf_pb::Cc_C_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Cc_C_Handshake>(Arena*);
template<> ::xsf_pb::Cc_C_Heartbeat* Arena::CreateMaybeMessage<::xsf_pb::Cc_C_Heartbeat>(Arena*);
template<> ::xsf_pb::Cc_C_ServerInfo* Arena::CreateMaybeMessage<::xsf_pb::Cc_C_ServerInfo>(Arena*);
template<> ::xsf_pb::Cc_C_ServerLost* Arena::CreateMaybeMessage<::xsf_pb::Cc_C_ServerLost>(Arena*);
template<> ::xsf_pb::Cc_C_ServerOk* Arena::CreateMaybeMessage<::xsf_pb::Cc_C_ServerOk>(Arena*);
template<> ::xsf_pb::MSG_ServerInfo* Arena::CreateMaybeMessage<::xsf_pb::MSG_ServerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pb {

// ===================================================================

class Cc_C_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Cc_C_Handshake) */ {
 public:
  Cc_C_Handshake();
  virtual ~Cc_C_Handshake();

  Cc_C_Handshake(const Cc_C_Handshake& from);
  Cc_C_Handshake(Cc_C_Handshake&& from) noexcept
    : Cc_C_Handshake() {
    *this = ::std::move(from);
  }

  inline Cc_C_Handshake& operator=(const Cc_C_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cc_C_Handshake& operator=(Cc_C_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cc_C_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cc_C_Handshake* internal_default_instance() {
    return reinterpret_cast<const Cc_C_Handshake*>(
               &_Cc_C_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Cc_C_Handshake& a, Cc_C_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Cc_C_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cc_C_Handshake* New() const final {
    return CreateMaybeMessage<Cc_C_Handshake>(nullptr);
  }

  Cc_C_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cc_C_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cc_C_Handshake& from);
  void MergeFrom(const Cc_C_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cc_C_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Cc_C_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // repeated uint32 ports = 2;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ports() const;
  void _internal_add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ports();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ports(int index) const;
  void set_ports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ports();

  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Cc_C_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ports_;
  mutable std::atomic<int> _ports_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class C_Cc_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.C_Cc_Handshake) */ {
 public:
  C_Cc_Handshake();
  virtual ~C_Cc_Handshake();

  C_Cc_Handshake(const C_Cc_Handshake& from);
  C_Cc_Handshake(C_Cc_Handshake&& from) noexcept
    : C_Cc_Handshake() {
    *this = ::std::move(from);
  }

  inline C_Cc_Handshake& operator=(const C_Cc_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Cc_Handshake& operator=(C_Cc_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Cc_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C_Cc_Handshake* internal_default_instance() {
    return reinterpret_cast<const C_Cc_Handshake*>(
               &_C_Cc_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_Cc_Handshake& a, C_Cc_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Cc_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Cc_Handshake* New() const final {
    return CreateMaybeMessage<C_Cc_Handshake>(nullptr);
  }

  C_Cc_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Cc_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Cc_Handshake& from);
  void MergeFrom(const C_Cc_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Cc_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.C_Cc_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kNewIdFieldNumber = 2,
  };
  // repeated uint32 ports = 3;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ports() const;
  void _internal_add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ports();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ports(int index) const;
  void set_ports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ports();

  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 new_id = 2;
  void clear_new_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 new_id() const;
  void set_new_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_new_id() const;
  void _internal_set_new_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.C_Cc_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ports_;
  mutable std::atomic<int> _ports_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 new_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class Cc_C_Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Cc_C_Heartbeat) */ {
 public:
  Cc_C_Heartbeat();
  virtual ~Cc_C_Heartbeat();

  Cc_C_Heartbeat(const Cc_C_Heartbeat& from);
  Cc_C_Heartbeat(Cc_C_Heartbeat&& from) noexcept
    : Cc_C_Heartbeat() {
    *this = ::std::move(from);
  }

  inline Cc_C_Heartbeat& operator=(const Cc_C_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cc_C_Heartbeat& operator=(Cc_C_Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cc_C_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cc_C_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Cc_C_Heartbeat*>(
               &_Cc_C_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Cc_C_Heartbeat& a, Cc_C_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Cc_C_Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cc_C_Heartbeat* New() const final {
    return CreateMaybeMessage<Cc_C_Heartbeat>(nullptr);
  }

  Cc_C_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cc_C_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cc_C_Heartbeat& from);
  void MergeFrom(const Cc_C_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cc_C_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Cc_C_Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.Cc_C_Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class MSG_ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.MSG_ServerInfo) */ {
 public:
  MSG_ServerInfo();
  virtual ~MSG_ServerInfo();

  MSG_ServerInfo(const MSG_ServerInfo& from);
  MSG_ServerInfo(MSG_ServerInfo&& from) noexcept
    : MSG_ServerInfo() {
    *this = ::std::move(from);
  }

  inline MSG_ServerInfo& operator=(const MSG_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ServerInfo& operator=(MSG_ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const MSG_ServerInfo*>(
               &_MSG_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_ServerInfo& a, MSG_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ServerInfo* New() const final {
    return CreateMaybeMessage<MSG_ServerInfo>(nullptr);
  }

  MSG_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ServerInfo& from);
  void MergeFrom(const MSG_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.MSG_ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortsFieldNumber = 3,
    kIpFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kStatusFieldNumber = 4,
  };
  // repeated uint32 ports = 3;
  int ports_size() const;
  private:
  int _internal_ports_size() const;
  public:
  void clear_ports();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ports(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ports() const;
  void _internal_add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ports();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ports(int index) const;
  void set_ports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ports();

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.MSG_ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ports_;
  mutable std::atomic<int> _ports_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class Cc_C_ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Cc_C_ServerInfo) */ {
 public:
  Cc_C_ServerInfo();
  virtual ~Cc_C_ServerInfo();

  Cc_C_ServerInfo(const Cc_C_ServerInfo& from);
  Cc_C_ServerInfo(Cc_C_ServerInfo&& from) noexcept
    : Cc_C_ServerInfo() {
    *this = ::std::move(from);
  }

  inline Cc_C_ServerInfo& operator=(const Cc_C_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cc_C_ServerInfo& operator=(Cc_C_ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cc_C_ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cc_C_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const Cc_C_ServerInfo*>(
               &_Cc_C_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Cc_C_ServerInfo& a, Cc_C_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Cc_C_ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cc_C_ServerInfo* New() const final {
    return CreateMaybeMessage<Cc_C_ServerInfo>(nullptr);
  }

  Cc_C_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cc_C_ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cc_C_ServerInfo& from);
  void MergeFrom(const Cc_C_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cc_C_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Cc_C_ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .xsf_pb.MSG_ServerInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::xsf_pb::MSG_ServerInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >*
      mutable_infos();
  private:
  const ::xsf_pb::MSG_ServerInfo& _internal_infos(int index) const;
  ::xsf_pb::MSG_ServerInfo* _internal_add_infos();
  public:
  const ::xsf_pb::MSG_ServerInfo& infos(int index) const;
  ::xsf_pb::MSG_ServerInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:xsf_pb.Cc_C_ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class C_Cc_ServerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.C_Cc_ServerInfo) */ {
 public:
  C_Cc_ServerInfo();
  virtual ~C_Cc_ServerInfo();

  C_Cc_ServerInfo(const C_Cc_ServerInfo& from);
  C_Cc_ServerInfo(C_Cc_ServerInfo&& from) noexcept
    : C_Cc_ServerInfo() {
    *this = ::std::move(from);
  }

  inline C_Cc_ServerInfo& operator=(const C_Cc_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Cc_ServerInfo& operator=(C_Cc_ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Cc_ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C_Cc_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const C_Cc_ServerInfo*>(
               &_C_Cc_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_Cc_ServerInfo& a, C_Cc_ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Cc_ServerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Cc_ServerInfo* New() const final {
    return CreateMaybeMessage<C_Cc_ServerInfo>(nullptr);
  }

  C_Cc_ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Cc_ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Cc_ServerInfo& from);
  void MergeFrom(const C_Cc_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Cc_ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.C_Cc_ServerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .xsf_pb.MSG_ServerInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::xsf_pb::MSG_ServerInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >*
      mutable_infos();
  private:
  const ::xsf_pb::MSG_ServerInfo& _internal_infos(int index) const;
  ::xsf_pb::MSG_ServerInfo* _internal_add_infos();
  public:
  const ::xsf_pb::MSG_ServerInfo& infos(int index) const;
  ::xsf_pb::MSG_ServerInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:xsf_pb.C_Cc_ServerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class Cc_C_ServerLost :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Cc_C_ServerLost) */ {
 public:
  Cc_C_ServerLost();
  virtual ~Cc_C_ServerLost();

  Cc_C_ServerLost(const Cc_C_ServerLost& from);
  Cc_C_ServerLost(Cc_C_ServerLost&& from) noexcept
    : Cc_C_ServerLost() {
    *this = ::std::move(from);
  }

  inline Cc_C_ServerLost& operator=(const Cc_C_ServerLost& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cc_C_ServerLost& operator=(Cc_C_ServerLost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cc_C_ServerLost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cc_C_ServerLost* internal_default_instance() {
    return reinterpret_cast<const Cc_C_ServerLost*>(
               &_Cc_C_ServerLost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Cc_C_ServerLost& a, Cc_C_ServerLost& b) {
    a.Swap(&b);
  }
  inline void Swap(Cc_C_ServerLost* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cc_C_ServerLost* New() const final {
    return CreateMaybeMessage<Cc_C_ServerLost>(nullptr);
  }

  Cc_C_ServerLost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cc_C_ServerLost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cc_C_ServerLost& from);
  void MergeFrom(const Cc_C_ServerLost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cc_C_ServerLost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Cc_C_ServerLost";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Cc_C_ServerLost)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class C_Cc_ServerLost :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.C_Cc_ServerLost) */ {
 public:
  C_Cc_ServerLost();
  virtual ~C_Cc_ServerLost();

  C_Cc_ServerLost(const C_Cc_ServerLost& from);
  C_Cc_ServerLost(C_Cc_ServerLost&& from) noexcept
    : C_Cc_ServerLost() {
    *this = ::std::move(from);
  }

  inline C_Cc_ServerLost& operator=(const C_Cc_ServerLost& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Cc_ServerLost& operator=(C_Cc_ServerLost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Cc_ServerLost& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C_Cc_ServerLost* internal_default_instance() {
    return reinterpret_cast<const C_Cc_ServerLost*>(
               &_C_Cc_ServerLost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_Cc_ServerLost& a, C_Cc_ServerLost& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Cc_ServerLost* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Cc_ServerLost* New() const final {
    return CreateMaybeMessage<C_Cc_ServerLost>(nullptr);
  }

  C_Cc_ServerLost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Cc_ServerLost>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Cc_ServerLost& from);
  void MergeFrom(const C_Cc_ServerLost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Cc_ServerLost* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.C_Cc_ServerLost";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.C_Cc_ServerLost)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class Cc_C_ServerOk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Cc_C_ServerOk) */ {
 public:
  Cc_C_ServerOk();
  virtual ~Cc_C_ServerOk();

  Cc_C_ServerOk(const Cc_C_ServerOk& from);
  Cc_C_ServerOk(Cc_C_ServerOk&& from) noexcept
    : Cc_C_ServerOk() {
    *this = ::std::move(from);
  }

  inline Cc_C_ServerOk& operator=(const Cc_C_ServerOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cc_C_ServerOk& operator=(Cc_C_ServerOk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cc_C_ServerOk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cc_C_ServerOk* internal_default_instance() {
    return reinterpret_cast<const Cc_C_ServerOk*>(
               &_Cc_C_ServerOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Cc_C_ServerOk& a, Cc_C_ServerOk& b) {
    a.Swap(&b);
  }
  inline void Swap(Cc_C_ServerOk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cc_C_ServerOk* New() const final {
    return CreateMaybeMessage<Cc_C_ServerOk>(nullptr);
  }

  Cc_C_ServerOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cc_C_ServerOk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cc_C_ServerOk& from);
  void MergeFrom(const Cc_C_ServerOk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cc_C_ServerOk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Cc_C_ServerOk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Cc_C_ServerOk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class C_Cc_ServerOk :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.C_Cc_ServerOk) */ {
 public:
  C_Cc_ServerOk();
  virtual ~C_Cc_ServerOk();

  C_Cc_ServerOk(const C_Cc_ServerOk& from);
  C_Cc_ServerOk(C_Cc_ServerOk&& from) noexcept
    : C_Cc_ServerOk() {
    *this = ::std::move(from);
  }

  inline C_Cc_ServerOk& operator=(const C_Cc_ServerOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Cc_ServerOk& operator=(C_Cc_ServerOk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Cc_ServerOk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C_Cc_ServerOk* internal_default_instance() {
    return reinterpret_cast<const C_Cc_ServerOk*>(
               &_C_Cc_ServerOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_Cc_ServerOk& a, C_Cc_ServerOk& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Cc_ServerOk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Cc_ServerOk* New() const final {
    return CreateMaybeMessage<C_Cc_ServerOk>(nullptr);
  }

  C_Cc_ServerOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Cc_ServerOk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Cc_ServerOk& from);
  void MergeFrom(const C_Cc_ServerOk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Cc_ServerOk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.C_Cc_ServerOk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.C_Cc_ServerOk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// -------------------------------------------------------------------

class C_Cc_Stop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.C_Cc_Stop) */ {
 public:
  C_Cc_Stop();
  virtual ~C_Cc_Stop();

  C_Cc_Stop(const C_Cc_Stop& from);
  C_Cc_Stop(C_Cc_Stop&& from) noexcept
    : C_Cc_Stop() {
    *this = ::std::move(from);
  }

  inline C_Cc_Stop& operator=(const C_Cc_Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Cc_Stop& operator=(C_Cc_Stop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_Cc_Stop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C_Cc_Stop* internal_default_instance() {
    return reinterpret_cast<const C_Cc_Stop*>(
               &_C_Cc_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_Cc_Stop& a, C_Cc_Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Cc_Stop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_Cc_Stop* New() const final {
    return CreateMaybeMessage<C_Cc_Stop>(nullptr);
  }

  C_Cc_Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_Cc_Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_Cc_Stop& from);
  void MergeFrom(const C_Cc_Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Cc_Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.C_Cc_Stop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Center_2eproto);
    return ::descriptor_table_Center_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.C_Cc_Stop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Center_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cc_C_Handshake

// uint32 server_id = 1;
inline void Cc_C_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Cc_C_Handshake.server_id)
  return _internal_server_id();
}
inline void Cc_C_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Cc_C_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Cc_C_Handshake.server_id)
}

// repeated uint32 ports = 2;
inline int Cc_C_Handshake::_internal_ports_size() const {
  return ports_.size();
}
inline int Cc_C_Handshake::ports_size() const {
  return _internal_ports_size();
}
inline void Cc_C_Handshake::clear_ports() {
  ports_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_Handshake::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_Handshake::ports(int index) const {
  // @@protoc_insertion_point(field_get:xsf_pb.Cc_C_Handshake.ports)
  return _internal_ports(index);
}
inline void Cc_C_Handshake::set_ports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsf_pb.Cc_C_Handshake.ports)
}
inline void Cc_C_Handshake::_internal_add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ports_.Add(value);
}
inline void Cc_C_Handshake::add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ports(value);
  // @@protoc_insertion_point(field_add:xsf_pb.Cc_C_Handshake.ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Cc_C_Handshake::_internal_ports() const {
  return ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Cc_C_Handshake::ports() const {
  // @@protoc_insertion_point(field_list:xsf_pb.Cc_C_Handshake.ports)
  return _internal_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Cc_C_Handshake::_internal_mutable_ports() {
  return &ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Cc_C_Handshake::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:xsf_pb.Cc_C_Handshake.ports)
  return _internal_mutable_ports();
}

// -------------------------------------------------------------------

// C_Cc_Handshake

// uint32 server_id = 1;
inline void C_Cc_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.C_Cc_Handshake.server_id)
  return _internal_server_id();
}
inline void C_Cc_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void C_Cc_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.C_Cc_Handshake.server_id)
}

// uint32 new_id = 2;
inline void C_Cc_Handshake::clear_new_id() {
  new_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_Handshake::_internal_new_id() const {
  return new_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_Handshake::new_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.C_Cc_Handshake.new_id)
  return _internal_new_id();
}
inline void C_Cc_Handshake::_internal_set_new_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  new_id_ = value;
}
inline void C_Cc_Handshake::set_new_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_new_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.C_Cc_Handshake.new_id)
}

// repeated uint32 ports = 3;
inline int C_Cc_Handshake::_internal_ports_size() const {
  return ports_.size();
}
inline int C_Cc_Handshake::ports_size() const {
  return _internal_ports_size();
}
inline void C_Cc_Handshake::clear_ports() {
  ports_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_Handshake::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_Handshake::ports(int index) const {
  // @@protoc_insertion_point(field_get:xsf_pb.C_Cc_Handshake.ports)
  return _internal_ports(index);
}
inline void C_Cc_Handshake::set_ports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsf_pb.C_Cc_Handshake.ports)
}
inline void C_Cc_Handshake::_internal_add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ports_.Add(value);
}
inline void C_Cc_Handshake::add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ports(value);
  // @@protoc_insertion_point(field_add:xsf_pb.C_Cc_Handshake.ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
C_Cc_Handshake::_internal_ports() const {
  return ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
C_Cc_Handshake::ports() const {
  // @@protoc_insertion_point(field_list:xsf_pb.C_Cc_Handshake.ports)
  return _internal_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
C_Cc_Handshake::_internal_mutable_ports() {
  return &ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
C_Cc_Handshake::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:xsf_pb.C_Cc_Handshake.ports)
  return _internal_mutable_ports();
}

// -------------------------------------------------------------------

// Cc_C_Heartbeat

// -------------------------------------------------------------------

// MSG_ServerInfo

// uint32 server_id = 1;
inline void MSG_ServerInfo::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.MSG_ServerInfo.server_id)
  return _internal_server_id();
}
inline void MSG_ServerInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void MSG_ServerInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.MSG_ServerInfo.server_id)
}

// string ip = 2;
inline void MSG_ServerInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MSG_ServerInfo::ip() const {
  // @@protoc_insertion_point(field_get:xsf_pb.MSG_ServerInfo.ip)
  return _internal_ip();
}
inline void MSG_ServerInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:xsf_pb.MSG_ServerInfo.ip)
}
inline std::string* MSG_ServerInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.MSG_ServerInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& MSG_ServerInfo::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void MSG_ServerInfo::_internal_set_ip(const std::string& value) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ServerInfo::set_ip(std::string&& value) {
  
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.MSG_ServerInfo.ip)
}
inline void MSG_ServerInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.MSG_ServerInfo.ip)
}
inline void MSG_ServerInfo::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.MSG_ServerInfo.ip)
}
inline std::string* MSG_ServerInfo::_internal_mutable_ip() {
  
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ServerInfo::release_ip() {
  // @@protoc_insertion_point(field_release:xsf_pb.MSG_ServerInfo.ip)
  
  return ip_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ServerInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.MSG_ServerInfo.ip)
}

// repeated uint32 ports = 3;
inline int MSG_ServerInfo::_internal_ports_size() const {
  return ports_.size();
}
inline int MSG_ServerInfo::ports_size() const {
  return _internal_ports_size();
}
inline void MSG_ServerInfo::clear_ports() {
  ports_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerInfo::_internal_ports(int index) const {
  return ports_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerInfo::ports(int index) const {
  // @@protoc_insertion_point(field_get:xsf_pb.MSG_ServerInfo.ports)
  return _internal_ports(index);
}
inline void MSG_ServerInfo::set_ports(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ports_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsf_pb.MSG_ServerInfo.ports)
}
inline void MSG_ServerInfo::_internal_add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ports_.Add(value);
}
inline void MSG_ServerInfo::add_ports(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ports(value);
  // @@protoc_insertion_point(field_add:xsf_pb.MSG_ServerInfo.ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MSG_ServerInfo::_internal_ports() const {
  return ports_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MSG_ServerInfo::ports() const {
  // @@protoc_insertion_point(field_list:xsf_pb.MSG_ServerInfo.ports)
  return _internal_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MSG_ServerInfo::_internal_mutable_ports() {
  return &ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MSG_ServerInfo::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:xsf_pb.MSG_ServerInfo.ports)
  return _internal_mutable_ports();
}

// uint32 status = 4;
inline void MSG_ServerInfo::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerInfo::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerInfo::status() const {
  // @@protoc_insertion_point(field_get:xsf_pb.MSG_ServerInfo.status)
  return _internal_status();
}
inline void MSG_ServerInfo::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void MSG_ServerInfo::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:xsf_pb.MSG_ServerInfo.status)
}

// -------------------------------------------------------------------

// Cc_C_ServerInfo

// repeated .xsf_pb.MSG_ServerInfo infos = 1;
inline int Cc_C_ServerInfo::_internal_infos_size() const {
  return infos_.size();
}
inline int Cc_C_ServerInfo::infos_size() const {
  return _internal_infos_size();
}
inline void Cc_C_ServerInfo::clear_infos() {
  infos_.Clear();
}
inline ::xsf_pb::MSG_ServerInfo* Cc_C_ServerInfo::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:xsf_pb.Cc_C_ServerInfo.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >*
Cc_C_ServerInfo::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:xsf_pb.Cc_C_ServerInfo.infos)
  return &infos_;
}
inline const ::xsf_pb::MSG_ServerInfo& Cc_C_ServerInfo::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::xsf_pb::MSG_ServerInfo& Cc_C_ServerInfo::infos(int index) const {
  // @@protoc_insertion_point(field_get:xsf_pb.Cc_C_ServerInfo.infos)
  return _internal_infos(index);
}
inline ::xsf_pb::MSG_ServerInfo* Cc_C_ServerInfo::_internal_add_infos() {
  return infos_.Add();
}
inline ::xsf_pb::MSG_ServerInfo* Cc_C_ServerInfo::add_infos() {
  // @@protoc_insertion_point(field_add:xsf_pb.Cc_C_ServerInfo.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >&
Cc_C_ServerInfo::infos() const {
  // @@protoc_insertion_point(field_list:xsf_pb.Cc_C_ServerInfo.infos)
  return infos_;
}

// -------------------------------------------------------------------

// C_Cc_ServerInfo

// repeated .xsf_pb.MSG_ServerInfo infos = 1;
inline int C_Cc_ServerInfo::_internal_infos_size() const {
  return infos_.size();
}
inline int C_Cc_ServerInfo::infos_size() const {
  return _internal_infos_size();
}
inline void C_Cc_ServerInfo::clear_infos() {
  infos_.Clear();
}
inline ::xsf_pb::MSG_ServerInfo* C_Cc_ServerInfo::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:xsf_pb.C_Cc_ServerInfo.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >*
C_Cc_ServerInfo::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:xsf_pb.C_Cc_ServerInfo.infos)
  return &infos_;
}
inline const ::xsf_pb::MSG_ServerInfo& C_Cc_ServerInfo::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::xsf_pb::MSG_ServerInfo& C_Cc_ServerInfo::infos(int index) const {
  // @@protoc_insertion_point(field_get:xsf_pb.C_Cc_ServerInfo.infos)
  return _internal_infos(index);
}
inline ::xsf_pb::MSG_ServerInfo* C_Cc_ServerInfo::_internal_add_infos() {
  return infos_.Add();
}
inline ::xsf_pb::MSG_ServerInfo* C_Cc_ServerInfo::add_infos() {
  // @@protoc_insertion_point(field_add:xsf_pb.C_Cc_ServerInfo.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xsf_pb::MSG_ServerInfo >&
C_Cc_ServerInfo::infos() const {
  // @@protoc_insertion_point(field_list:xsf_pb.C_Cc_ServerInfo.infos)
  return infos_;
}

// -------------------------------------------------------------------

// Cc_C_ServerLost

// uint32 server_id = 1;
inline void Cc_C_ServerLost::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_ServerLost::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_ServerLost::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Cc_C_ServerLost.server_id)
  return _internal_server_id();
}
inline void Cc_C_ServerLost::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Cc_C_ServerLost::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Cc_C_ServerLost.server_id)
}

// -------------------------------------------------------------------

// C_Cc_ServerLost

// uint32 server_id = 1;
inline void C_Cc_ServerLost::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_ServerLost::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_ServerLost::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.C_Cc_ServerLost.server_id)
  return _internal_server_id();
}
inline void C_Cc_ServerLost::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void C_Cc_ServerLost::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.C_Cc_ServerLost.server_id)
}

// -------------------------------------------------------------------

// Cc_C_ServerOk

// uint32 server_id = 1;
inline void Cc_C_ServerOk::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_ServerOk::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Cc_C_ServerOk::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Cc_C_ServerOk.server_id)
  return _internal_server_id();
}
inline void Cc_C_ServerOk::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Cc_C_ServerOk::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Cc_C_ServerOk.server_id)
}

// -------------------------------------------------------------------

// C_Cc_ServerOk

// uint32 server_id = 1;
inline void C_Cc_ServerOk::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_ServerOk::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 C_Cc_ServerOk::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.C_Cc_ServerOk.server_id)
  return _internal_server_id();
}
inline void C_Cc_ServerOk::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void C_Cc_ServerOk::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.C_Cc_ServerOk.server_id)
}

// -------------------------------------------------------------------

// C_Cc_Stop

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Center_2eproto

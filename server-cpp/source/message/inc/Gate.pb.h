// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Gate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Gate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Gate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Gate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gate_2eproto;
namespace xsf_pb {
class GtA_Gt_Broadcast;
class GtA_Gt_BroadcastDefaultTypeInternal;
extern GtA_Gt_BroadcastDefaultTypeInternal _GtA_Gt_Broadcast_default_instance_;
class GtA_Gt_ClientDisconnect;
class GtA_Gt_ClientDisconnectDefaultTypeInternal;
extern GtA_Gt_ClientDisconnectDefaultTypeInternal _GtA_Gt_ClientDisconnect_default_instance_;
class GtA_Gt_ClientMessage;
class GtA_Gt_ClientMessageDefaultTypeInternal;
extern GtA_Gt_ClientMessageDefaultTypeInternal _GtA_Gt_ClientMessage_default_instance_;
class GtA_Gt_Handshake;
class GtA_Gt_HandshakeDefaultTypeInternal;
extern GtA_Gt_HandshakeDefaultTypeInternal _GtA_Gt_Handshake_default_instance_;
class GtA_Gt_SetServerId;
class GtA_Gt_SetServerIdDefaultTypeInternal;
extern GtA_Gt_SetServerIdDefaultTypeInternal _GtA_Gt_SetServerId_default_instance_;
class Gt_GtA_ClientClose;
class Gt_GtA_ClientCloseDefaultTypeInternal;
extern Gt_GtA_ClientCloseDefaultTypeInternal _Gt_GtA_ClientClose_default_instance_;
class Gt_GtA_Handshake;
class Gt_GtA_HandshakeDefaultTypeInternal;
extern Gt_GtA_HandshakeDefaultTypeInternal _Gt_GtA_Handshake_default_instance_;
class Gt_GtA_Heartbeat;
class Gt_GtA_HeartbeatDefaultTypeInternal;
extern Gt_GtA_HeartbeatDefaultTypeInternal _Gt_GtA_Heartbeat_default_instance_;
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::xsf_pb::GtA_Gt_Broadcast* Arena::CreateMaybeMessage<::xsf_pb::GtA_Gt_Broadcast>(Arena*);
template<> ::xsf_pb::GtA_Gt_ClientDisconnect* Arena::CreateMaybeMessage<::xsf_pb::GtA_Gt_ClientDisconnect>(Arena*);
template<> ::xsf_pb::GtA_Gt_ClientMessage* Arena::CreateMaybeMessage<::xsf_pb::GtA_Gt_ClientMessage>(Arena*);
template<> ::xsf_pb::GtA_Gt_Handshake* Arena::CreateMaybeMessage<::xsf_pb::GtA_Gt_Handshake>(Arena*);
template<> ::xsf_pb::GtA_Gt_SetServerId* Arena::CreateMaybeMessage<::xsf_pb::GtA_Gt_SetServerId>(Arena*);
template<> ::xsf_pb::Gt_GtA_ClientClose* Arena::CreateMaybeMessage<::xsf_pb::Gt_GtA_ClientClose>(Arena*);
template<> ::xsf_pb::Gt_GtA_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Gt_GtA_Handshake>(Arena*);
template<> ::xsf_pb::Gt_GtA_Heartbeat* Arena::CreateMaybeMessage<::xsf_pb::Gt_GtA_Heartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pb {

// ===================================================================

class Gt_GtA_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Gt_GtA_Handshake) */ {
 public:
  Gt_GtA_Handshake();
  virtual ~Gt_GtA_Handshake();

  Gt_GtA_Handshake(const Gt_GtA_Handshake& from);
  Gt_GtA_Handshake(Gt_GtA_Handshake&& from) noexcept
    : Gt_GtA_Handshake() {
    *this = ::std::move(from);
  }

  inline Gt_GtA_Handshake& operator=(const Gt_GtA_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gt_GtA_Handshake& operator=(Gt_GtA_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gt_GtA_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gt_GtA_Handshake* internal_default_instance() {
    return reinterpret_cast<const Gt_GtA_Handshake*>(
               &_Gt_GtA_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gt_GtA_Handshake& a, Gt_GtA_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Gt_GtA_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gt_GtA_Handshake* New() const final {
    return CreateMaybeMessage<Gt_GtA_Handshake>(nullptr);
  }

  Gt_GtA_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gt_GtA_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gt_GtA_Handshake& from);
  void MergeFrom(const Gt_GtA_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gt_GtA_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Gt_GtA_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Gt_GtA_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class GtA_Gt_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.GtA_Gt_Handshake) */ {
 public:
  GtA_Gt_Handshake();
  virtual ~GtA_Gt_Handshake();

  GtA_Gt_Handshake(const GtA_Gt_Handshake& from);
  GtA_Gt_Handshake(GtA_Gt_Handshake&& from) noexcept
    : GtA_Gt_Handshake() {
    *this = ::std::move(from);
  }

  inline GtA_Gt_Handshake& operator=(const GtA_Gt_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtA_Gt_Handshake& operator=(GtA_Gt_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtA_Gt_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtA_Gt_Handshake* internal_default_instance() {
    return reinterpret_cast<const GtA_Gt_Handshake*>(
               &_GtA_Gt_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GtA_Gt_Handshake& a, GtA_Gt_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(GtA_Gt_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtA_Gt_Handshake* New() const final {
    return CreateMaybeMessage<GtA_Gt_Handshake>(nullptr);
  }

  GtA_Gt_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtA_Gt_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtA_Gt_Handshake& from);
  void MergeFrom(const GtA_Gt_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtA_Gt_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.GtA_Gt_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.GtA_Gt_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class Gt_GtA_Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Gt_GtA_Heartbeat) */ {
 public:
  Gt_GtA_Heartbeat();
  virtual ~Gt_GtA_Heartbeat();

  Gt_GtA_Heartbeat(const Gt_GtA_Heartbeat& from);
  Gt_GtA_Heartbeat(Gt_GtA_Heartbeat&& from) noexcept
    : Gt_GtA_Heartbeat() {
    *this = ::std::move(from);
  }

  inline Gt_GtA_Heartbeat& operator=(const Gt_GtA_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gt_GtA_Heartbeat& operator=(Gt_GtA_Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gt_GtA_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gt_GtA_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Gt_GtA_Heartbeat*>(
               &_Gt_GtA_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Gt_GtA_Heartbeat& a, Gt_GtA_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Gt_GtA_Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gt_GtA_Heartbeat* New() const final {
    return CreateMaybeMessage<Gt_GtA_Heartbeat>(nullptr);
  }

  Gt_GtA_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gt_GtA_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gt_GtA_Heartbeat& from);
  void MergeFrom(const Gt_GtA_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gt_GtA_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Gt_GtA_Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.Gt_GtA_Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class Gt_GtA_ClientClose :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Gt_GtA_ClientClose) */ {
 public:
  Gt_GtA_ClientClose();
  virtual ~Gt_GtA_ClientClose();

  Gt_GtA_ClientClose(const Gt_GtA_ClientClose& from);
  Gt_GtA_ClientClose(Gt_GtA_ClientClose&& from) noexcept
    : Gt_GtA_ClientClose() {
    *this = ::std::move(from);
  }

  inline Gt_GtA_ClientClose& operator=(const Gt_GtA_ClientClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gt_GtA_ClientClose& operator=(Gt_GtA_ClientClose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gt_GtA_ClientClose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gt_GtA_ClientClose* internal_default_instance() {
    return reinterpret_cast<const Gt_GtA_ClientClose*>(
               &_Gt_GtA_ClientClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gt_GtA_ClientClose& a, Gt_GtA_ClientClose& b) {
    a.Swap(&b);
  }
  inline void Swap(Gt_GtA_ClientClose* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gt_GtA_ClientClose* New() const final {
    return CreateMaybeMessage<Gt_GtA_ClientClose>(nullptr);
  }

  Gt_GtA_ClientClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gt_GtA_ClientClose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gt_GtA_ClientClose& from);
  void MergeFrom(const Gt_GtA_ClientClose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gt_GtA_ClientClose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Gt_GtA_ClientClose";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Gt_GtA_ClientClose)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class GtA_Gt_ClientDisconnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.GtA_Gt_ClientDisconnect) */ {
 public:
  GtA_Gt_ClientDisconnect();
  virtual ~GtA_Gt_ClientDisconnect();

  GtA_Gt_ClientDisconnect(const GtA_Gt_ClientDisconnect& from);
  GtA_Gt_ClientDisconnect(GtA_Gt_ClientDisconnect&& from) noexcept
    : GtA_Gt_ClientDisconnect() {
    *this = ::std::move(from);
  }

  inline GtA_Gt_ClientDisconnect& operator=(const GtA_Gt_ClientDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtA_Gt_ClientDisconnect& operator=(GtA_Gt_ClientDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtA_Gt_ClientDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtA_Gt_ClientDisconnect* internal_default_instance() {
    return reinterpret_cast<const GtA_Gt_ClientDisconnect*>(
               &_GtA_Gt_ClientDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GtA_Gt_ClientDisconnect& a, GtA_Gt_ClientDisconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(GtA_Gt_ClientDisconnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtA_Gt_ClientDisconnect* New() const final {
    return CreateMaybeMessage<GtA_Gt_ClientDisconnect>(nullptr);
  }

  GtA_Gt_ClientDisconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtA_Gt_ClientDisconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtA_Gt_ClientDisconnect& from);
  void MergeFrom(const GtA_Gt_ClientDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtA_Gt_ClientDisconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.GtA_Gt_ClientDisconnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // uint32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 reason = 2;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.GtA_Gt_ClientDisconnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class GtA_Gt_ClientMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.GtA_Gt_ClientMessage) */ {
 public:
  GtA_Gt_ClientMessage();
  virtual ~GtA_Gt_ClientMessage();

  GtA_Gt_ClientMessage(const GtA_Gt_ClientMessage& from);
  GtA_Gt_ClientMessage(GtA_Gt_ClientMessage&& from) noexcept
    : GtA_Gt_ClientMessage() {
    *this = ::std::move(from);
  }

  inline GtA_Gt_ClientMessage& operator=(const GtA_Gt_ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtA_Gt_ClientMessage& operator=(GtA_Gt_ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtA_Gt_ClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtA_Gt_ClientMessage* internal_default_instance() {
    return reinterpret_cast<const GtA_Gt_ClientMessage*>(
               &_GtA_Gt_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GtA_Gt_ClientMessage& a, GtA_Gt_ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GtA_Gt_ClientMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtA_Gt_ClientMessage* New() const final {
    return CreateMaybeMessage<GtA_Gt_ClientMessage>(nullptr);
  }

  GtA_Gt_ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtA_Gt_ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtA_Gt_ClientMessage& from);
  void MergeFrom(const GtA_Gt_ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtA_Gt_ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.GtA_Gt_ClientMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kClientMessageFieldNumber = 2,
  };
  // repeated uint32 client_id = 1;
  int client_id_size() const;
  private:
  int _internal_client_id_size() const;
  public:
  void clear_client_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_client_id() const;
  void _internal_add_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_client_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id(int index) const;
  void set_client_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      client_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_client_id();

  // bytes client_message = 2;
  void clear_client_message();
  const std::string& client_message() const;
  void set_client_message(const std::string& value);
  void set_client_message(std::string&& value);
  void set_client_message(const char* value);
  void set_client_message(const void* value, size_t size);
  std::string* mutable_client_message();
  std::string* release_client_message();
  void set_allocated_client_message(std::string* client_message);
  private:
  const std::string& _internal_client_message() const;
  void _internal_set_client_message(const std::string& value);
  std::string* _internal_mutable_client_message();
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.GtA_Gt_ClientMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > client_id_;
  mutable std::atomic<int> _client_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class GtA_Gt_Broadcast :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.GtA_Gt_Broadcast) */ {
 public:
  GtA_Gt_Broadcast();
  virtual ~GtA_Gt_Broadcast();

  GtA_Gt_Broadcast(const GtA_Gt_Broadcast& from);
  GtA_Gt_Broadcast(GtA_Gt_Broadcast&& from) noexcept
    : GtA_Gt_Broadcast() {
    *this = ::std::move(from);
  }

  inline GtA_Gt_Broadcast& operator=(const GtA_Gt_Broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtA_Gt_Broadcast& operator=(GtA_Gt_Broadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtA_Gt_Broadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtA_Gt_Broadcast* internal_default_instance() {
    return reinterpret_cast<const GtA_Gt_Broadcast*>(
               &_GtA_Gt_Broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GtA_Gt_Broadcast& a, GtA_Gt_Broadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(GtA_Gt_Broadcast* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtA_Gt_Broadcast* New() const final {
    return CreateMaybeMessage<GtA_Gt_Broadcast>(nullptr);
  }

  GtA_Gt_Broadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtA_Gt_Broadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtA_Gt_Broadcast& from);
  void MergeFrom(const GtA_Gt_Broadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtA_Gt_Broadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.GtA_Gt_Broadcast";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientMessageFieldNumber = 1,
  };
  // bytes client_message = 1;
  void clear_client_message();
  const std::string& client_message() const;
  void set_client_message(const std::string& value);
  void set_client_message(std::string&& value);
  void set_client_message(const char* value);
  void set_client_message(const void* value, size_t size);
  std::string* mutable_client_message();
  std::string* release_client_message();
  void set_allocated_client_message(std::string* client_message);
  private:
  const std::string& _internal_client_message() const;
  void _internal_set_client_message(const std::string& value);
  std::string* _internal_mutable_client_message();
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.GtA_Gt_Broadcast)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// -------------------------------------------------------------------

class GtA_Gt_SetServerId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.GtA_Gt_SetServerId) */ {
 public:
  GtA_Gt_SetServerId();
  virtual ~GtA_Gt_SetServerId();

  GtA_Gt_SetServerId(const GtA_Gt_SetServerId& from);
  GtA_Gt_SetServerId(GtA_Gt_SetServerId&& from) noexcept
    : GtA_Gt_SetServerId() {
    *this = ::std::move(from);
  }

  inline GtA_Gt_SetServerId& operator=(const GtA_Gt_SetServerId& from) {
    CopyFrom(from);
    return *this;
  }
  inline GtA_Gt_SetServerId& operator=(GtA_Gt_SetServerId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GtA_Gt_SetServerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GtA_Gt_SetServerId* internal_default_instance() {
    return reinterpret_cast<const GtA_Gt_SetServerId*>(
               &_GtA_Gt_SetServerId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GtA_Gt_SetServerId& a, GtA_Gt_SetServerId& b) {
    a.Swap(&b);
  }
  inline void Swap(GtA_Gt_SetServerId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GtA_Gt_SetServerId* New() const final {
    return CreateMaybeMessage<GtA_Gt_SetServerId>(nullptr);
  }

  GtA_Gt_SetServerId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GtA_Gt_SetServerId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GtA_Gt_SetServerId& from);
  void MergeFrom(const GtA_Gt_SetServerId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GtA_Gt_SetServerId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.GtA_Gt_SetServerId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Gate_2eproto);
    return ::descriptor_table_Gate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kEpFieldNumber = 2,
    kServerIdFieldNumber = 3,
  };
  // uint32 client_id = 1;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ep = 2;
  void clear_ep();
  ::PROTOBUF_NAMESPACE_ID::uint32 ep() const;
  void set_ep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ep() const;
  void _internal_set_ep(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 server_id = 3;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.GtA_Gt_SetServerId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ep_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Gate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gt_GtA_Handshake

// uint32 server_id = 1;
inline void Gt_GtA_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gt_GtA_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gt_GtA_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Gt_GtA_Handshake.server_id)
  return _internal_server_id();
}
inline void Gt_GtA_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Gt_GtA_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Gt_GtA_Handshake.server_id)
}

// -------------------------------------------------------------------

// GtA_Gt_Handshake

// uint32 server_id = 1;
inline void GtA_Gt_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_Handshake.server_id)
  return _internal_server_id();
}
inline void GtA_Gt_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void GtA_Gt_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_Handshake.server_id)
}

// -------------------------------------------------------------------

// Gt_GtA_Heartbeat

// -------------------------------------------------------------------

// Gt_GtA_ClientClose

// uint32 client_id = 1;
inline void Gt_GtA_ClientClose::clear_client_id() {
  client_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gt_GtA_ClientClose::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Gt_GtA_ClientClose::client_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Gt_GtA_ClientClose.client_id)
  return _internal_client_id();
}
inline void Gt_GtA_ClientClose::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  client_id_ = value;
}
inline void Gt_GtA_ClientClose::set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Gt_GtA_ClientClose.client_id)
}

// -------------------------------------------------------------------

// GtA_Gt_ClientDisconnect

// uint32 client_id = 1;
inline void GtA_Gt_ClientDisconnect::clear_client_id() {
  client_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_ClientDisconnect::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_ClientDisconnect::client_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_ClientDisconnect.client_id)
  return _internal_client_id();
}
inline void GtA_Gt_ClientDisconnect::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  client_id_ = value;
}
inline void GtA_Gt_ClientDisconnect::set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_ClientDisconnect.client_id)
}

// uint32 reason = 2;
inline void GtA_Gt_ClientDisconnect::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_ClientDisconnect::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_ClientDisconnect::reason() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_ClientDisconnect.reason)
  return _internal_reason();
}
inline void GtA_Gt_ClientDisconnect::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void GtA_Gt_ClientDisconnect::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_ClientDisconnect.reason)
}

// -------------------------------------------------------------------

// GtA_Gt_ClientMessage

// repeated uint32 client_id = 1;
inline int GtA_Gt_ClientMessage::_internal_client_id_size() const {
  return client_id_.size();
}
inline int GtA_Gt_ClientMessage::client_id_size() const {
  return _internal_client_id_size();
}
inline void GtA_Gt_ClientMessage::clear_client_id() {
  client_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_ClientMessage::_internal_client_id(int index) const {
  return client_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_ClientMessage::client_id(int index) const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_ClientMessage.client_id)
  return _internal_client_id(index);
}
inline void GtA_Gt_ClientMessage::set_client_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  client_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_ClientMessage.client_id)
}
inline void GtA_Gt_ClientMessage::_internal_add_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  client_id_.Add(value);
}
inline void GtA_Gt_ClientMessage::add_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_client_id(value);
  // @@protoc_insertion_point(field_add:xsf_pb.GtA_Gt_ClientMessage.client_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GtA_Gt_ClientMessage::_internal_client_id() const {
  return client_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GtA_Gt_ClientMessage::client_id() const {
  // @@protoc_insertion_point(field_list:xsf_pb.GtA_Gt_ClientMessage.client_id)
  return _internal_client_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GtA_Gt_ClientMessage::_internal_mutable_client_id() {
  return &client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GtA_Gt_ClientMessage::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable_list:xsf_pb.GtA_Gt_ClientMessage.client_id)
  return _internal_mutable_client_id();
}

// bytes client_message = 2;
inline void GtA_Gt_ClientMessage::clear_client_message() {
  client_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GtA_Gt_ClientMessage::client_message() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_ClientMessage.client_message)
  return _internal_client_message();
}
inline void GtA_Gt_ClientMessage::set_client_message(const std::string& value) {
  _internal_set_client_message(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_ClientMessage.client_message)
}
inline std::string* GtA_Gt_ClientMessage::mutable_client_message() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.GtA_Gt_ClientMessage.client_message)
  return _internal_mutable_client_message();
}
inline const std::string& GtA_Gt_ClientMessage::_internal_client_message() const {
  return client_message_.GetNoArena();
}
inline void GtA_Gt_ClientMessage::_internal_set_client_message(const std::string& value) {
  
  client_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GtA_Gt_ClientMessage::set_client_message(std::string&& value) {
  
  client_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.GtA_Gt_ClientMessage.client_message)
}
inline void GtA_Gt_ClientMessage::set_client_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.GtA_Gt_ClientMessage.client_message)
}
inline void GtA_Gt_ClientMessage::set_client_message(const void* value, size_t size) {
  
  client_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.GtA_Gt_ClientMessage.client_message)
}
inline std::string* GtA_Gt_ClientMessage::_internal_mutable_client_message() {
  
  return client_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GtA_Gt_ClientMessage::release_client_message() {
  // @@protoc_insertion_point(field_release:xsf_pb.GtA_Gt_ClientMessage.client_message)
  
  return client_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GtA_Gt_ClientMessage::set_allocated_client_message(std::string* client_message) {
  if (client_message != nullptr) {
    
  } else {
    
  }
  client_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_message);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.GtA_Gt_ClientMessage.client_message)
}

// -------------------------------------------------------------------

// GtA_Gt_Broadcast

// bytes client_message = 1;
inline void GtA_Gt_Broadcast::clear_client_message() {
  client_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GtA_Gt_Broadcast::client_message() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_Broadcast.client_message)
  return _internal_client_message();
}
inline void GtA_Gt_Broadcast::set_client_message(const std::string& value) {
  _internal_set_client_message(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_Broadcast.client_message)
}
inline std::string* GtA_Gt_Broadcast::mutable_client_message() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.GtA_Gt_Broadcast.client_message)
  return _internal_mutable_client_message();
}
inline const std::string& GtA_Gt_Broadcast::_internal_client_message() const {
  return client_message_.GetNoArena();
}
inline void GtA_Gt_Broadcast::_internal_set_client_message(const std::string& value) {
  
  client_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GtA_Gt_Broadcast::set_client_message(std::string&& value) {
  
  client_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.GtA_Gt_Broadcast.client_message)
}
inline void GtA_Gt_Broadcast::set_client_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.GtA_Gt_Broadcast.client_message)
}
inline void GtA_Gt_Broadcast::set_client_message(const void* value, size_t size) {
  
  client_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.GtA_Gt_Broadcast.client_message)
}
inline std::string* GtA_Gt_Broadcast::_internal_mutable_client_message() {
  
  return client_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GtA_Gt_Broadcast::release_client_message() {
  // @@protoc_insertion_point(field_release:xsf_pb.GtA_Gt_Broadcast.client_message)
  
  return client_message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GtA_Gt_Broadcast::set_allocated_client_message(std::string* client_message) {
  if (client_message != nullptr) {
    
  } else {
    
  }
  client_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_message);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.GtA_Gt_Broadcast.client_message)
}

// -------------------------------------------------------------------

// GtA_Gt_SetServerId

// uint32 client_id = 1;
inline void GtA_Gt_SetServerId::clear_client_id() {
  client_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_SetServerId::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_SetServerId::client_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_SetServerId.client_id)
  return _internal_client_id();
}
inline void GtA_Gt_SetServerId::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  client_id_ = value;
}
inline void GtA_Gt_SetServerId::set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_SetServerId.client_id)
}

// uint32 ep = 2;
inline void GtA_Gt_SetServerId::clear_ep() {
  ep_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_SetServerId::_internal_ep() const {
  return ep_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_SetServerId::ep() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_SetServerId.ep)
  return _internal_ep();
}
inline void GtA_Gt_SetServerId::_internal_set_ep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ep_ = value;
}
inline void GtA_Gt_SetServerId::set_ep(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ep(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_SetServerId.ep)
}

// uint32 server_id = 3;
inline void GtA_Gt_SetServerId::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_SetServerId::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GtA_Gt_SetServerId::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.GtA_Gt_SetServerId.server_id)
  return _internal_server_id();
}
inline void GtA_Gt_SetServerId::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void GtA_Gt_SetServerId::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.GtA_Gt_SetServerId.server_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Gate_2eproto

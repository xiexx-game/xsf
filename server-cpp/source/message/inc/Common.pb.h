// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pb {

enum DisconnectReason : int {
  DR_None = 0,
  Full = 1,
  HTTimeout = 2,
  ServerDown = 3,
  MsgInvalid = 4,
  LoginError = 5,
  DisconnectReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DisconnectReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DisconnectReason_IsValid(int value);
constexpr DisconnectReason DisconnectReason_MIN = DR_None;
constexpr DisconnectReason DisconnectReason_MAX = LoginError;
constexpr int DisconnectReason_ARRAYSIZE = DisconnectReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisconnectReason_descriptor();
template<typename T>
inline const std::string& DisconnectReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisconnectReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisconnectReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DisconnectReason_descriptor(), enum_t_value);
}
inline bool DisconnectReason_Parse(
    const std::string& name, DisconnectReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DisconnectReason>(
    DisconnectReason_descriptor(), name, value);
}
enum LoginResult : int {
  Success = 0,
  SystemError = 1,
  LoginResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoginResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoginResult_IsValid(int value);
constexpr LoginResult LoginResult_MIN = Success;
constexpr LoginResult LoginResult_MAX = SystemError;
constexpr int LoginResult_ARRAYSIZE = LoginResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoginResult_descriptor();
template<typename T>
inline const std::string& LoginResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoginResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoginResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoginResult_descriptor(), enum_t_value);
}
inline bool LoginResult_Parse(
    const std::string& name, LoginResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoginResult>(
    LoginResult_descriptor(), name, value);
}
enum OpResult : int {
  Ok = 0,
  Mysql_SchemaError = 1,
  Mysql_PoolNotExist = 2,
  Mysql_SqlBaseNotExist = 3,
  Mysql_ExecuteError = 4,
  OpResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OpResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OpResult_IsValid(int value);
constexpr OpResult OpResult_MIN = Ok;
constexpr OpResult OpResult_MAX = Mysql_ExecuteError;
constexpr int OpResult_ARRAYSIZE = OpResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpResult_descriptor();
template<typename T>
inline const std::string& OpResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OpResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OpResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OpResult_descriptor(), enum_t_value);
}
inline bool OpResult_Parse(
    const std::string& name, OpResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OpResult>(
    OpResult_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xsf_pb::DisconnectReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsf_pb::DisconnectReason>() {
  return ::xsf_pb::DisconnectReason_descriptor();
}
template <> struct is_proto_enum< ::xsf_pb::LoginResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsf_pb::LoginResult>() {
  return ::xsf_pb::LoginResult_descriptor();
}
template <> struct is_proto_enum< ::xsf_pb::OpResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsf_pb::OpResult>() {
  return ::xsf_pb::OpResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2eproto

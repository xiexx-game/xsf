// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Client_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Client_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Client_2eproto;
namespace xsf_pb {
class Clt_G_Login;
class Clt_G_LoginDefaultTypeInternal;
extern Clt_G_LoginDefaultTypeInternal _Clt_G_Login_default_instance_;
class Clt_Gt_Handshake;
class Clt_Gt_HandshakeDefaultTypeInternal;
extern Clt_Gt_HandshakeDefaultTypeInternal _Clt_Gt_Handshake_default_instance_;
class Clt_Gt_Heartbeat;
class Clt_Gt_HeartbeatDefaultTypeInternal;
extern Clt_Gt_HeartbeatDefaultTypeInternal _Clt_Gt_Heartbeat_default_instance_;
class G_Clt_LoginResult;
class G_Clt_LoginResultDefaultTypeInternal;
extern G_Clt_LoginResultDefaultTypeInternal _G_Clt_LoginResult_default_instance_;
class G_Clt_TestData;
class G_Clt_TestDataDefaultTypeInternal;
extern G_Clt_TestDataDefaultTypeInternal _G_Clt_TestData_default_instance_;
class Gt_Clt_Disconnect;
class Gt_Clt_DisconnectDefaultTypeInternal;
extern Gt_Clt_DisconnectDefaultTypeInternal _Gt_Clt_Disconnect_default_instance_;
class Gt_Clt_Handshake;
class Gt_Clt_HandshakeDefaultTypeInternal;
extern Gt_Clt_HandshakeDefaultTypeInternal _Gt_Clt_Handshake_default_instance_;
class Gt_Clt_Heartbeat;
class Gt_Clt_HeartbeatDefaultTypeInternal;
extern Gt_Clt_HeartbeatDefaultTypeInternal _Gt_Clt_Heartbeat_default_instance_;
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::xsf_pb::Clt_G_Login* Arena::CreateMaybeMessage<::xsf_pb::Clt_G_Login>(Arena*);
template<> ::xsf_pb::Clt_Gt_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Clt_Gt_Handshake>(Arena*);
template<> ::xsf_pb::Clt_Gt_Heartbeat* Arena::CreateMaybeMessage<::xsf_pb::Clt_Gt_Heartbeat>(Arena*);
template<> ::xsf_pb::G_Clt_LoginResult* Arena::CreateMaybeMessage<::xsf_pb::G_Clt_LoginResult>(Arena*);
template<> ::xsf_pb::G_Clt_TestData* Arena::CreateMaybeMessage<::xsf_pb::G_Clt_TestData>(Arena*);
template<> ::xsf_pb::Gt_Clt_Disconnect* Arena::CreateMaybeMessage<::xsf_pb::Gt_Clt_Disconnect>(Arena*);
template<> ::xsf_pb::Gt_Clt_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Gt_Clt_Handshake>(Arena*);
template<> ::xsf_pb::Gt_Clt_Heartbeat* Arena::CreateMaybeMessage<::xsf_pb::Gt_Clt_Heartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pb {

// ===================================================================

class Clt_Gt_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Clt_Gt_Handshake) */ {
 public:
  Clt_Gt_Handshake();
  virtual ~Clt_Gt_Handshake();

  Clt_Gt_Handshake(const Clt_Gt_Handshake& from);
  Clt_Gt_Handshake(Clt_Gt_Handshake&& from) noexcept
    : Clt_Gt_Handshake() {
    *this = ::std::move(from);
  }

  inline Clt_Gt_Handshake& operator=(const Clt_Gt_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clt_Gt_Handshake& operator=(Clt_Gt_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clt_Gt_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clt_Gt_Handshake* internal_default_instance() {
    return reinterpret_cast<const Clt_Gt_Handshake*>(
               &_Clt_Gt_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Clt_Gt_Handshake& a, Clt_Gt_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Clt_Gt_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clt_Gt_Handshake* New() const final {
    return CreateMaybeMessage<Clt_Gt_Handshake>(nullptr);
  }

  Clt_Gt_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clt_Gt_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clt_Gt_Handshake& from);
  void MergeFrom(const Clt_Gt_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clt_Gt_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Clt_Gt_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.Clt_Gt_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class Gt_Clt_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Gt_Clt_Handshake) */ {
 public:
  Gt_Clt_Handshake();
  virtual ~Gt_Clt_Handshake();

  Gt_Clt_Handshake(const Gt_Clt_Handshake& from);
  Gt_Clt_Handshake(Gt_Clt_Handshake&& from) noexcept
    : Gt_Clt_Handshake() {
    *this = ::std::move(from);
  }

  inline Gt_Clt_Handshake& operator=(const Gt_Clt_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gt_Clt_Handshake& operator=(Gt_Clt_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gt_Clt_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gt_Clt_Handshake* internal_default_instance() {
    return reinterpret_cast<const Gt_Clt_Handshake*>(
               &_Gt_Clt_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Gt_Clt_Handshake& a, Gt_Clt_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Gt_Clt_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gt_Clt_Handshake* New() const final {
    return CreateMaybeMessage<Gt_Clt_Handshake>(nullptr);
  }

  Gt_Clt_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gt_Clt_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gt_Clt_Handshake& from);
  void MergeFrom(const Gt_Clt_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gt_Clt_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Gt_Clt_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.Gt_Clt_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class Clt_Gt_Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Clt_Gt_Heartbeat) */ {
 public:
  Clt_Gt_Heartbeat();
  virtual ~Clt_Gt_Heartbeat();

  Clt_Gt_Heartbeat(const Clt_Gt_Heartbeat& from);
  Clt_Gt_Heartbeat(Clt_Gt_Heartbeat&& from) noexcept
    : Clt_Gt_Heartbeat() {
    *this = ::std::move(from);
  }

  inline Clt_Gt_Heartbeat& operator=(const Clt_Gt_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clt_Gt_Heartbeat& operator=(Clt_Gt_Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clt_Gt_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clt_Gt_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Clt_Gt_Heartbeat*>(
               &_Clt_Gt_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Clt_Gt_Heartbeat& a, Clt_Gt_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Clt_Gt_Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clt_Gt_Heartbeat* New() const final {
    return CreateMaybeMessage<Clt_Gt_Heartbeat>(nullptr);
  }

  Clt_Gt_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clt_Gt_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clt_Gt_Heartbeat& from);
  void MergeFrom(const Clt_Gt_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clt_Gt_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Clt_Gt_Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // uint64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Clt_Gt_Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class Gt_Clt_Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Gt_Clt_Heartbeat) */ {
 public:
  Gt_Clt_Heartbeat();
  virtual ~Gt_Clt_Heartbeat();

  Gt_Clt_Heartbeat(const Gt_Clt_Heartbeat& from);
  Gt_Clt_Heartbeat(Gt_Clt_Heartbeat&& from) noexcept
    : Gt_Clt_Heartbeat() {
    *this = ::std::move(from);
  }

  inline Gt_Clt_Heartbeat& operator=(const Gt_Clt_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gt_Clt_Heartbeat& operator=(Gt_Clt_Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gt_Clt_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gt_Clt_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Gt_Clt_Heartbeat*>(
               &_Gt_Clt_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Gt_Clt_Heartbeat& a, Gt_Clt_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Gt_Clt_Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gt_Clt_Heartbeat* New() const final {
    return CreateMaybeMessage<Gt_Clt_Heartbeat>(nullptr);
  }

  Gt_Clt_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gt_Clt_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gt_Clt_Heartbeat& from);
  void MergeFrom(const Gt_Clt_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gt_Clt_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Gt_Clt_Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTimeFieldNumber = 1,
    kServerTimeFieldNumber = 2,
  };
  // uint64 client_time = 1;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 server_time = 2;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Gt_Clt_Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class Clt_G_Login :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Clt_G_Login) */ {
 public:
  Clt_G_Login();
  virtual ~Clt_G_Login();

  Clt_G_Login(const Clt_G_Login& from);
  Clt_G_Login(Clt_G_Login&& from) noexcept
    : Clt_G_Login() {
    *this = ::std::move(from);
  }

  inline Clt_G_Login& operator=(const Clt_G_Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Clt_G_Login& operator=(Clt_G_Login&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Clt_G_Login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Clt_G_Login* internal_default_instance() {
    return reinterpret_cast<const Clt_G_Login*>(
               &_Clt_G_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Clt_G_Login& a, Clt_G_Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Clt_G_Login* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Clt_G_Login* New() const final {
    return CreateMaybeMessage<Clt_G_Login>(nullptr);
  }

  Clt_G_Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Clt_G_Login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Clt_G_Login& from);
  void MergeFrom(const Clt_G_Login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Clt_G_Login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Clt_G_Login";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Clt_G_Login)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class Gt_Clt_Disconnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Gt_Clt_Disconnect) */ {
 public:
  Gt_Clt_Disconnect();
  virtual ~Gt_Clt_Disconnect();

  Gt_Clt_Disconnect(const Gt_Clt_Disconnect& from);
  Gt_Clt_Disconnect(Gt_Clt_Disconnect&& from) noexcept
    : Gt_Clt_Disconnect() {
    *this = ::std::move(from);
  }

  inline Gt_Clt_Disconnect& operator=(const Gt_Clt_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gt_Clt_Disconnect& operator=(Gt_Clt_Disconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Gt_Clt_Disconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gt_Clt_Disconnect* internal_default_instance() {
    return reinterpret_cast<const Gt_Clt_Disconnect*>(
               &_Gt_Clt_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Gt_Clt_Disconnect& a, Gt_Clt_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(Gt_Clt_Disconnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Gt_Clt_Disconnect* New() const final {
    return CreateMaybeMessage<Gt_Clt_Disconnect>(nullptr);
  }

  Gt_Clt_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Gt_Clt_Disconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Gt_Clt_Disconnect& from);
  void MergeFrom(const Gt_Clt_Disconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gt_Clt_Disconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Gt_Clt_Disconnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // int32 reason = 1;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::int32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Gt_Clt_Disconnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class G_Clt_LoginResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.G_Clt_LoginResult) */ {
 public:
  G_Clt_LoginResult();
  virtual ~G_Clt_LoginResult();

  G_Clt_LoginResult(const G_Clt_LoginResult& from);
  G_Clt_LoginResult(G_Clt_LoginResult&& from) noexcept
    : G_Clt_LoginResult() {
    *this = ::std::move(from);
  }

  inline G_Clt_LoginResult& operator=(const G_Clt_LoginResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline G_Clt_LoginResult& operator=(G_Clt_LoginResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const G_Clt_LoginResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const G_Clt_LoginResult* internal_default_instance() {
    return reinterpret_cast<const G_Clt_LoginResult*>(
               &_G_Clt_LoginResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(G_Clt_LoginResult& a, G_Clt_LoginResult& b) {
    a.Swap(&b);
  }
  inline void Swap(G_Clt_LoginResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline G_Clt_LoginResult* New() const final {
    return CreateMaybeMessage<G_Clt_LoginResult>(nullptr);
  }

  G_Clt_LoginResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<G_Clt_LoginResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const G_Clt_LoginResult& from);
  void MergeFrom(const G_Clt_LoginResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(G_Clt_LoginResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.G_Clt_LoginResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // uint32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::uint32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.G_Clt_LoginResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class G_Clt_TestData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.G_Clt_TestData) */ {
 public:
  G_Clt_TestData();
  virtual ~G_Clt_TestData();

  G_Clt_TestData(const G_Clt_TestData& from);
  G_Clt_TestData(G_Clt_TestData&& from) noexcept
    : G_Clt_TestData() {
    *this = ::std::move(from);
  }

  inline G_Clt_TestData& operator=(const G_Clt_TestData& from) {
    CopyFrom(from);
    return *this;
  }
  inline G_Clt_TestData& operator=(G_Clt_TestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const G_Clt_TestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const G_Clt_TestData* internal_default_instance() {
    return reinterpret_cast<const G_Clt_TestData*>(
               &_G_Clt_TestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(G_Clt_TestData& a, G_Clt_TestData& b) {
    a.Swap(&b);
  }
  inline void Swap(G_Clt_TestData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline G_Clt_TestData* New() const final {
    return CreateMaybeMessage<G_Clt_TestData>(nullptr);
  }

  G_Clt_TestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<G_Clt_TestData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const G_Clt_TestData& from);
  void MergeFrom(const G_Clt_TestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(G_Clt_TestData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.G_Clt_TestData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Client_2eproto);
    return ::descriptor_table_Client_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.G_Clt_TestData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Client_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Clt_Gt_Handshake

// -------------------------------------------------------------------

// Gt_Clt_Handshake

// -------------------------------------------------------------------

// Clt_Gt_Heartbeat

// uint64 time = 1;
inline void Clt_Gt_Heartbeat::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Clt_Gt_Heartbeat::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Clt_Gt_Heartbeat::time() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Clt_Gt_Heartbeat.time)
  return _internal_time();
}
inline void Clt_Gt_Heartbeat::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void Clt_Gt_Heartbeat::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Clt_Gt_Heartbeat.time)
}

// -------------------------------------------------------------------

// Gt_Clt_Heartbeat

// uint64 client_time = 1;
inline void Gt_Clt_Heartbeat::clear_client_time() {
  client_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Gt_Clt_Heartbeat::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Gt_Clt_Heartbeat::client_time() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Gt_Clt_Heartbeat.client_time)
  return _internal_client_time();
}
inline void Gt_Clt_Heartbeat::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_time_ = value;
}
inline void Gt_Clt_Heartbeat::set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Gt_Clt_Heartbeat.client_time)
}

// uint64 server_time = 2;
inline void Gt_Clt_Heartbeat::clear_server_time() {
  server_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Gt_Clt_Heartbeat::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Gt_Clt_Heartbeat::server_time() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Gt_Clt_Heartbeat.server_time)
  return _internal_server_time();
}
inline void Gt_Clt_Heartbeat::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_time_ = value;
}
inline void Gt_Clt_Heartbeat::set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Gt_Clt_Heartbeat.server_time)
}

// -------------------------------------------------------------------

// Clt_G_Login

// string account = 1;
inline void Clt_G_Login::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Clt_G_Login::account() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Clt_G_Login.account)
  return _internal_account();
}
inline void Clt_G_Login::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Clt_G_Login.account)
}
inline std::string* Clt_G_Login::mutable_account() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.Clt_G_Login.account)
  return _internal_mutable_account();
}
inline const std::string& Clt_G_Login::_internal_account() const {
  return account_.GetNoArena();
}
inline void Clt_G_Login::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Clt_G_Login::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.Clt_G_Login.account)
}
inline void Clt_G_Login::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.Clt_G_Login.account)
}
inline void Clt_G_Login::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.Clt_G_Login.account)
}
inline std::string* Clt_G_Login::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Clt_G_Login::release_account() {
  // @@protoc_insertion_point(field_release:xsf_pb.Clt_G_Login.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Clt_G_Login::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.Clt_G_Login.account)
}

// string password = 2;
inline void Clt_G_Login::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Clt_G_Login::password() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Clt_G_Login.password)
  return _internal_password();
}
inline void Clt_G_Login::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Clt_G_Login.password)
}
inline std::string* Clt_G_Login::mutable_password() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.Clt_G_Login.password)
  return _internal_mutable_password();
}
inline const std::string& Clt_G_Login::_internal_password() const {
  return password_.GetNoArena();
}
inline void Clt_G_Login::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Clt_G_Login::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.Clt_G_Login.password)
}
inline void Clt_G_Login::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.Clt_G_Login.password)
}
inline void Clt_G_Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.Clt_G_Login.password)
}
inline std::string* Clt_G_Login::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Clt_G_Login::release_password() {
  // @@protoc_insertion_point(field_release:xsf_pb.Clt_G_Login.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Clt_G_Login::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.Clt_G_Login.password)
}

// -------------------------------------------------------------------

// Gt_Clt_Disconnect

// int32 reason = 1;
inline void Gt_Clt_Disconnect::clear_reason() {
  reason_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gt_Clt_Disconnect::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Gt_Clt_Disconnect::reason() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Gt_Clt_Disconnect.reason)
  return _internal_reason();
}
inline void Gt_Clt_Disconnect::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reason_ = value;
}
inline void Gt_Clt_Disconnect::set_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Gt_Clt_Disconnect.reason)
}

// -------------------------------------------------------------------

// G_Clt_LoginResult

// uint32 result = 1;
inline void G_Clt_LoginResult::clear_result() {
  result_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 G_Clt_LoginResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 G_Clt_LoginResult::result() const {
  // @@protoc_insertion_point(field_get:xsf_pb.G_Clt_LoginResult.result)
  return _internal_result();
}
inline void G_Clt_LoginResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  result_ = value;
}
inline void G_Clt_LoginResult::set_result(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:xsf_pb.G_Clt_LoginResult.result)
}

// -------------------------------------------------------------------

// G_Clt_TestData

// string message = 1;
inline void G_Clt_TestData::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& G_Clt_TestData::message() const {
  // @@protoc_insertion_point(field_get:xsf_pb.G_Clt_TestData.message)
  return _internal_message();
}
inline void G_Clt_TestData::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:xsf_pb.G_Clt_TestData.message)
}
inline std::string* G_Clt_TestData::mutable_message() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.G_Clt_TestData.message)
  return _internal_mutable_message();
}
inline const std::string& G_Clt_TestData::_internal_message() const {
  return message_.GetNoArena();
}
inline void G_Clt_TestData::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void G_Clt_TestData::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.G_Clt_TestData.message)
}
inline void G_Clt_TestData::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.G_Clt_TestData.message)
}
inline void G_Clt_TestData::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.G_Clt_TestData.message)
}
inline std::string* G_Clt_TestData::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* G_Clt_TestData::release_message() {
  // @@protoc_insertion_point(field_release:xsf_pb.G_Clt_TestData.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void G_Clt_TestData::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.G_Clt_TestData.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Client_2eproto

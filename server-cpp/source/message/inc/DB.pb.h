// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DB_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DB_2eproto;
namespace xsf_pb {
class Db_Dbc_Handshake;
class Db_Dbc_HandshakeDefaultTypeInternal;
extern Db_Dbc_HandshakeDefaultTypeInternal _Db_Dbc_Handshake_default_instance_;
class Db_Dbc_Response;
class Db_Dbc_ResponseDefaultTypeInternal;
extern Db_Dbc_ResponseDefaultTypeInternal _Db_Dbc_Response_default_instance_;
class Dbc_Db_Handshake;
class Dbc_Db_HandshakeDefaultTypeInternal;
extern Dbc_Db_HandshakeDefaultTypeInternal _Dbc_Db_Handshake_default_instance_;
class Dbc_Db_Heartbeat;
class Dbc_Db_HeartbeatDefaultTypeInternal;
extern Dbc_Db_HeartbeatDefaultTypeInternal _Dbc_Db_Heartbeat_default_instance_;
class Dbc_Db_Request;
class Dbc_Db_RequestDefaultTypeInternal;
extern Dbc_Db_RequestDefaultTypeInternal _Dbc_Db_Request_default_instance_;
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::xsf_pb::Db_Dbc_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Db_Dbc_Handshake>(Arena*);
template<> ::xsf_pb::Db_Dbc_Response* Arena::CreateMaybeMessage<::xsf_pb::Db_Dbc_Response>(Arena*);
template<> ::xsf_pb::Dbc_Db_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Dbc_Db_Handshake>(Arena*);
template<> ::xsf_pb::Dbc_Db_Heartbeat* Arena::CreateMaybeMessage<::xsf_pb::Dbc_Db_Heartbeat>(Arena*);
template<> ::xsf_pb::Dbc_Db_Request* Arena::CreateMaybeMessage<::xsf_pb::Dbc_Db_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pb {

// ===================================================================

class Dbc_Db_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Dbc_Db_Handshake) */ {
 public:
  Dbc_Db_Handshake();
  virtual ~Dbc_Db_Handshake();

  Dbc_Db_Handshake(const Dbc_Db_Handshake& from);
  Dbc_Db_Handshake(Dbc_Db_Handshake&& from) noexcept
    : Dbc_Db_Handshake() {
    *this = ::std::move(from);
  }

  inline Dbc_Db_Handshake& operator=(const Dbc_Db_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dbc_Db_Handshake& operator=(Dbc_Db_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dbc_Db_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dbc_Db_Handshake* internal_default_instance() {
    return reinterpret_cast<const Dbc_Db_Handshake*>(
               &_Dbc_Db_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dbc_Db_Handshake& a, Dbc_Db_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Dbc_Db_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dbc_Db_Handshake* New() const final {
    return CreateMaybeMessage<Dbc_Db_Handshake>(nullptr);
  }

  Dbc_Db_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dbc_Db_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dbc_Db_Handshake& from);
  void MergeFrom(const Dbc_Db_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dbc_Db_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Dbc_Db_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DB_2eproto);
    return ::descriptor_table_DB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Dbc_Db_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DB_2eproto;
};
// -------------------------------------------------------------------

class Db_Dbc_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Db_Dbc_Handshake) */ {
 public:
  Db_Dbc_Handshake();
  virtual ~Db_Dbc_Handshake();

  Db_Dbc_Handshake(const Db_Dbc_Handshake& from);
  Db_Dbc_Handshake(Db_Dbc_Handshake&& from) noexcept
    : Db_Dbc_Handshake() {
    *this = ::std::move(from);
  }

  inline Db_Dbc_Handshake& operator=(const Db_Dbc_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Db_Dbc_Handshake& operator=(Db_Dbc_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Db_Dbc_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Db_Dbc_Handshake* internal_default_instance() {
    return reinterpret_cast<const Db_Dbc_Handshake*>(
               &_Db_Dbc_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Db_Dbc_Handshake& a, Db_Dbc_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Db_Dbc_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Db_Dbc_Handshake* New() const final {
    return CreateMaybeMessage<Db_Dbc_Handshake>(nullptr);
  }

  Db_Dbc_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Db_Dbc_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Db_Dbc_Handshake& from);
  void MergeFrom(const Db_Dbc_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Db_Dbc_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Db_Dbc_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DB_2eproto);
    return ::descriptor_table_DB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Db_Dbc_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DB_2eproto;
};
// -------------------------------------------------------------------

class Dbc_Db_Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Dbc_Db_Heartbeat) */ {
 public:
  Dbc_Db_Heartbeat();
  virtual ~Dbc_Db_Heartbeat();

  Dbc_Db_Heartbeat(const Dbc_Db_Heartbeat& from);
  Dbc_Db_Heartbeat(Dbc_Db_Heartbeat&& from) noexcept
    : Dbc_Db_Heartbeat() {
    *this = ::std::move(from);
  }

  inline Dbc_Db_Heartbeat& operator=(const Dbc_Db_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dbc_Db_Heartbeat& operator=(Dbc_Db_Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dbc_Db_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dbc_Db_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Dbc_Db_Heartbeat*>(
               &_Dbc_Db_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dbc_Db_Heartbeat& a, Dbc_Db_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Dbc_Db_Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dbc_Db_Heartbeat* New() const final {
    return CreateMaybeMessage<Dbc_Db_Heartbeat>(nullptr);
  }

  Dbc_Db_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dbc_Db_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dbc_Db_Heartbeat& from);
  void MergeFrom(const Dbc_Db_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dbc_Db_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Dbc_Db_Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DB_2eproto);
    return ::descriptor_table_DB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.Dbc_Db_Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DB_2eproto;
};
// -------------------------------------------------------------------

class Dbc_Db_Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Dbc_Db_Request) */ {
 public:
  Dbc_Db_Request();
  virtual ~Dbc_Db_Request();

  Dbc_Db_Request(const Dbc_Db_Request& from);
  Dbc_Db_Request(Dbc_Db_Request&& from) noexcept
    : Dbc_Db_Request() {
    *this = ::std::move(from);
  }

  inline Dbc_Db_Request& operator=(const Dbc_Db_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dbc_Db_Request& operator=(Dbc_Db_Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dbc_Db_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dbc_Db_Request* internal_default_instance() {
    return reinterpret_cast<const Dbc_Db_Request*>(
               &_Dbc_Db_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dbc_Db_Request& a, Dbc_Db_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Dbc_Db_Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dbc_Db_Request* New() const final {
    return CreateMaybeMessage<Dbc_Db_Request>(nullptr);
  }

  Dbc_Db_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dbc_Db_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dbc_Db_Request& from);
  void MergeFrom(const Dbc_Db_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dbc_Db_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Dbc_Db_Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DB_2eproto);
    return ::descriptor_table_DB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 4,
    kSerialIdFieldNumber = 1,
    kDbRequestIdFieldNumber = 2,
    kQueueIdFieldNumber = 3,
  };
  // bytes datas = 4;
  void clear_datas();
  const std::string& datas() const;
  void set_datas(const std::string& value);
  void set_datas(std::string&& value);
  void set_datas(const char* value);
  void set_datas(const void* value, size_t size);
  std::string* mutable_datas();
  std::string* release_datas();
  void set_allocated_datas(std::string* datas);
  private:
  const std::string& _internal_datas() const;
  void _internal_set_datas(const std::string& value);
  std::string* _internal_mutable_datas();
  public:

  // uint64 serial_id = 1;
  void clear_serial_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 serial_id() const;
  void set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_serial_id() const;
  void _internal_set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 db_request_id = 2;
  void clear_db_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 db_request_id() const;
  void set_db_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_db_request_id() const;
  void _internal_set_db_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 queue_id = 3;
  void clear_queue_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_id() const;
  void set_queue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_queue_id() const;
  void _internal_set_queue_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Dbc_Db_Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serial_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 db_request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 queue_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DB_2eproto;
};
// -------------------------------------------------------------------

class Db_Dbc_Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Db_Dbc_Response) */ {
 public:
  Db_Dbc_Response();
  virtual ~Db_Dbc_Response();

  Db_Dbc_Response(const Db_Dbc_Response& from);
  Db_Dbc_Response(Db_Dbc_Response&& from) noexcept
    : Db_Dbc_Response() {
    *this = ::std::move(from);
  }

  inline Db_Dbc_Response& operator=(const Db_Dbc_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Db_Dbc_Response& operator=(Db_Dbc_Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Db_Dbc_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Db_Dbc_Response* internal_default_instance() {
    return reinterpret_cast<const Db_Dbc_Response*>(
               &_Db_Dbc_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Db_Dbc_Response& a, Db_Dbc_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Db_Dbc_Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Db_Dbc_Response* New() const final {
    return CreateMaybeMessage<Db_Dbc_Response>(nullptr);
  }

  Db_Dbc_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Db_Dbc_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Db_Dbc_Response& from);
  void MergeFrom(const Db_Dbc_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Db_Dbc_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Db_Dbc_Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DB_2eproto);
    return ::descriptor_table_DB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 4,
    kSerialIdFieldNumber = 1,
    kCodeFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // bytes datas = 4;
  void clear_datas();
  const std::string& datas() const;
  void set_datas(const std::string& value);
  void set_datas(std::string&& value);
  void set_datas(const char* value);
  void set_datas(const void* value, size_t size);
  std::string* mutable_datas();
  std::string* release_datas();
  void set_allocated_datas(std::string* datas);
  private:
  const std::string& _internal_datas() const;
  void _internal_set_datas(const std::string& value);
  std::string* _internal_mutable_datas();
  public:

  // uint64 serial_id = 1;
  void clear_serial_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 serial_id() const;
  void set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_serial_id() const;
  void _internal_set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total = 3;
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::uint32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Db_Dbc_Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datas_;
  ::PROTOBUF_NAMESPACE_ID::uint64 serial_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dbc_Db_Handshake

// uint32 server_id = 1;
inline void Dbc_Db_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dbc_Db_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dbc_Db_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Dbc_Db_Handshake.server_id)
  return _internal_server_id();
}
inline void Dbc_Db_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Dbc_Db_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Dbc_Db_Handshake.server_id)
}

// -------------------------------------------------------------------

// Db_Dbc_Handshake

// uint32 server_id = 1;
inline void Db_Dbc_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Db_Dbc_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Db_Dbc_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Db_Dbc_Handshake.server_id)
  return _internal_server_id();
}
inline void Db_Dbc_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Db_Dbc_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Db_Dbc_Handshake.server_id)
}

// -------------------------------------------------------------------

// Dbc_Db_Heartbeat

// -------------------------------------------------------------------

// Dbc_Db_Request

// uint64 serial_id = 1;
inline void Dbc_Db_Request::clear_serial_id() {
  serial_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dbc_Db_Request::_internal_serial_id() const {
  return serial_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dbc_Db_Request::serial_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Dbc_Db_Request.serial_id)
  return _internal_serial_id();
}
inline void Dbc_Db_Request::_internal_set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  serial_id_ = value;
}
inline void Dbc_Db_Request::set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_serial_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Dbc_Db_Request.serial_id)
}

// uint32 db_request_id = 2;
inline void Dbc_Db_Request::clear_db_request_id() {
  db_request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dbc_Db_Request::_internal_db_request_id() const {
  return db_request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dbc_Db_Request::db_request_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Dbc_Db_Request.db_request_id)
  return _internal_db_request_id();
}
inline void Dbc_Db_Request::_internal_set_db_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  db_request_id_ = value;
}
inline void Dbc_Db_Request::set_db_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_db_request_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Dbc_Db_Request.db_request_id)
}

// uint32 queue_id = 3;
inline void Dbc_Db_Request::clear_queue_id() {
  queue_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dbc_Db_Request::_internal_queue_id() const {
  return queue_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Dbc_Db_Request::queue_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Dbc_Db_Request.queue_id)
  return _internal_queue_id();
}
inline void Dbc_Db_Request::_internal_set_queue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  queue_id_ = value;
}
inline void Dbc_Db_Request::set_queue_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_queue_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Dbc_Db_Request.queue_id)
}

// bytes datas = 4;
inline void Dbc_Db_Request::clear_datas() {
  datas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Dbc_Db_Request::datas() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Dbc_Db_Request.datas)
  return _internal_datas();
}
inline void Dbc_Db_Request::set_datas(const std::string& value) {
  _internal_set_datas(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Dbc_Db_Request.datas)
}
inline std::string* Dbc_Db_Request::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.Dbc_Db_Request.datas)
  return _internal_mutable_datas();
}
inline const std::string& Dbc_Db_Request::_internal_datas() const {
  return datas_.GetNoArena();
}
inline void Dbc_Db_Request::_internal_set_datas(const std::string& value) {
  
  datas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Dbc_Db_Request::set_datas(std::string&& value) {
  
  datas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.Dbc_Db_Request.datas)
}
inline void Dbc_Db_Request::set_datas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.Dbc_Db_Request.datas)
}
inline void Dbc_Db_Request::set_datas(const void* value, size_t size) {
  
  datas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.Dbc_Db_Request.datas)
}
inline std::string* Dbc_Db_Request::_internal_mutable_datas() {
  
  return datas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Dbc_Db_Request::release_datas() {
  // @@protoc_insertion_point(field_release:xsf_pb.Dbc_Db_Request.datas)
  
  return datas_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Dbc_Db_Request::set_allocated_datas(std::string* datas) {
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datas);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.Dbc_Db_Request.datas)
}

// -------------------------------------------------------------------

// Db_Dbc_Response

// uint64 serial_id = 1;
inline void Db_Dbc_Response::clear_serial_id() {
  serial_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Db_Dbc_Response::_internal_serial_id() const {
  return serial_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Db_Dbc_Response::serial_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Db_Dbc_Response.serial_id)
  return _internal_serial_id();
}
inline void Db_Dbc_Response::_internal_set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  serial_id_ = value;
}
inline void Db_Dbc_Response::set_serial_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_serial_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Db_Dbc_Response.serial_id)
}

// uint32 code = 2;
inline void Db_Dbc_Response::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Db_Dbc_Response::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Db_Dbc_Response::code() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Db_Dbc_Response.code)
  return _internal_code();
}
inline void Db_Dbc_Response::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void Db_Dbc_Response::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Db_Dbc_Response.code)
}

// uint32 total = 3;
inline void Db_Dbc_Response::clear_total() {
  total_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Db_Dbc_Response::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Db_Dbc_Response::total() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Db_Dbc_Response.total)
  return _internal_total();
}
inline void Db_Dbc_Response::_internal_set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_ = value;
}
inline void Db_Dbc_Response::set_total(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Db_Dbc_Response.total)
}

// bytes datas = 4;
inline void Db_Dbc_Response::clear_datas() {
  datas_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Db_Dbc_Response::datas() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Db_Dbc_Response.datas)
  return _internal_datas();
}
inline void Db_Dbc_Response::set_datas(const std::string& value) {
  _internal_set_datas(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Db_Dbc_Response.datas)
}
inline std::string* Db_Dbc_Response::mutable_datas() {
  // @@protoc_insertion_point(field_mutable:xsf_pb.Db_Dbc_Response.datas)
  return _internal_mutable_datas();
}
inline const std::string& Db_Dbc_Response::_internal_datas() const {
  return datas_.GetNoArena();
}
inline void Db_Dbc_Response::_internal_set_datas(const std::string& value) {
  
  datas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Db_Dbc_Response::set_datas(std::string&& value) {
  
  datas_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xsf_pb.Db_Dbc_Response.datas)
}
inline void Db_Dbc_Response::set_datas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xsf_pb.Db_Dbc_Response.datas)
}
inline void Db_Dbc_Response::set_datas(const void* value, size_t size) {
  
  datas_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xsf_pb.Db_Dbc_Response.datas)
}
inline std::string* Db_Dbc_Response::_internal_mutable_datas() {
  
  return datas_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Db_Dbc_Response::release_datas() {
  // @@protoc_insertion_point(field_release:xsf_pb.Db_Dbc_Response.datas)
  
  return datas_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Db_Dbc_Response::set_allocated_datas(std::string* datas) {
  if (datas != nullptr) {
    
  } else {
    
  }
  datas_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datas);
  // @@protoc_insertion_point(field_set_allocated:xsf_pb.Db_Dbc_Response.datas)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DB_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Hub.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Hub_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Hub_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Hub_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Hub_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Hub_2eproto;
namespace xsf_pb {
class H_Hc_Handshake;
class H_Hc_HandshakeDefaultTypeInternal;
extern H_Hc_HandshakeDefaultTypeInternal _H_Hc_Handshake_default_instance_;
class Hc_H_Handshake;
class Hc_H_HandshakeDefaultTypeInternal;
extern Hc_H_HandshakeDefaultTypeInternal _Hc_H_Handshake_default_instance_;
class Hc_H_Heartbeat;
class Hc_H_HeartbeatDefaultTypeInternal;
extern Hc_H_HeartbeatDefaultTypeInternal _Hc_H_Heartbeat_default_instance_;
}  // namespace xsf_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::xsf_pb::H_Hc_Handshake* Arena::CreateMaybeMessage<::xsf_pb::H_Hc_Handshake>(Arena*);
template<> ::xsf_pb::Hc_H_Handshake* Arena::CreateMaybeMessage<::xsf_pb::Hc_H_Handshake>(Arena*);
template<> ::xsf_pb::Hc_H_Heartbeat* Arena::CreateMaybeMessage<::xsf_pb::Hc_H_Heartbeat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pb {

// ===================================================================

class Hc_H_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Hc_H_Handshake) */ {
 public:
  Hc_H_Handshake();
  virtual ~Hc_H_Handshake();

  Hc_H_Handshake(const Hc_H_Handshake& from);
  Hc_H_Handshake(Hc_H_Handshake&& from) noexcept
    : Hc_H_Handshake() {
    *this = ::std::move(from);
  }

  inline Hc_H_Handshake& operator=(const Hc_H_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hc_H_Handshake& operator=(Hc_H_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hc_H_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hc_H_Handshake* internal_default_instance() {
    return reinterpret_cast<const Hc_H_Handshake*>(
               &_Hc_H_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Hc_H_Handshake& a, Hc_H_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(Hc_H_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hc_H_Handshake* New() const final {
    return CreateMaybeMessage<Hc_H_Handshake>(nullptr);
  }

  Hc_H_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hc_H_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hc_H_Handshake& from);
  void MergeFrom(const Hc_H_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hc_H_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Hc_H_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Hub_2eproto);
    return ::descriptor_table_Hub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.Hc_H_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hub_2eproto;
};
// -------------------------------------------------------------------

class H_Hc_Handshake :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.H_Hc_Handshake) */ {
 public:
  H_Hc_Handshake();
  virtual ~H_Hc_Handshake();

  H_Hc_Handshake(const H_Hc_Handshake& from);
  H_Hc_Handshake(H_Hc_Handshake&& from) noexcept
    : H_Hc_Handshake() {
    *this = ::std::move(from);
  }

  inline H_Hc_Handshake& operator=(const H_Hc_Handshake& from) {
    CopyFrom(from);
    return *this;
  }
  inline H_Hc_Handshake& operator=(H_Hc_Handshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const H_Hc_Handshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const H_Hc_Handshake* internal_default_instance() {
    return reinterpret_cast<const H_Hc_Handshake*>(
               &_H_Hc_Handshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(H_Hc_Handshake& a, H_Hc_Handshake& b) {
    a.Swap(&b);
  }
  inline void Swap(H_Hc_Handshake* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline H_Hc_Handshake* New() const final {
    return CreateMaybeMessage<H_Hc_Handshake>(nullptr);
  }

  H_Hc_Handshake* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<H_Hc_Handshake>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const H_Hc_Handshake& from);
  void MergeFrom(const H_Hc_Handshake& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H_Hc_Handshake* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.H_Hc_Handshake";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Hub_2eproto);
    return ::descriptor_table_Hub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // uint32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:xsf_pb.H_Hc_Handshake)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hub_2eproto;
};
// -------------------------------------------------------------------

class Hc_H_Heartbeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xsf_pb.Hc_H_Heartbeat) */ {
 public:
  Hc_H_Heartbeat();
  virtual ~Hc_H_Heartbeat();

  Hc_H_Heartbeat(const Hc_H_Heartbeat& from);
  Hc_H_Heartbeat(Hc_H_Heartbeat&& from) noexcept
    : Hc_H_Heartbeat() {
    *this = ::std::move(from);
  }

  inline Hc_H_Heartbeat& operator=(const Hc_H_Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hc_H_Heartbeat& operator=(Hc_H_Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hc_H_Heartbeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hc_H_Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Hc_H_Heartbeat*>(
               &_Hc_H_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Hc_H_Heartbeat& a, Hc_H_Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Hc_H_Heartbeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hc_H_Heartbeat* New() const final {
    return CreateMaybeMessage<Hc_H_Heartbeat>(nullptr);
  }

  Hc_H_Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hc_H_Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hc_H_Heartbeat& from);
  void MergeFrom(const Hc_H_Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hc_H_Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xsf_pb.Hc_H_Heartbeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Hub_2eproto);
    return ::descriptor_table_Hub_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xsf_pb.Hc_H_Heartbeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Hub_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hc_H_Handshake

// uint32 server_id = 1;
inline void Hc_H_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Hc_H_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Hc_H_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.Hc_H_Handshake.server_id)
  return _internal_server_id();
}
inline void Hc_H_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void Hc_H_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.Hc_H_Handshake.server_id)
}

// -------------------------------------------------------------------

// H_Hc_Handshake

// uint32 server_id = 1;
inline void H_Hc_Handshake::clear_server_id() {
  server_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 H_Hc_Handshake::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 H_Hc_Handshake::server_id() const {
  // @@protoc_insertion_point(field_get:xsf_pb.H_Hc_Handshake.server_id)
  return _internal_server_id();
}
inline void H_Hc_Handshake::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  server_id_ = value;
}
inline void H_Hc_Handshake::set_server_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:xsf_pb.H_Hc_Handshake.server_id)
}

// -------------------------------------------------------------------

// Hc_H_Heartbeat

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Hub_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SMessageID.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SMessageID_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SMessageID_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SMessageID_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SMessageID_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SMessageID_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace xsf_pbid {

enum SMSGID : int {
  SMSGID_None = 0,
  Start = 3000,
  Cc_C_Handshake = 3001,
  C_Cc_Handshake = 3002,
  Cc_C_Heartbeat = 3003,
  Cc_C_ServerInfo = 3005,
  C_Cc_ServerInfo = 3006,
  Cc_C_ServerLost = 3007,
  C_Cc_ServerLost = 3008,
  Cc_C_ServerOk = 3009,
  C_Cc_ServerOk = 3010,
  C_Cc_Stop = 3011,
  Gt_GtA_Handshake = 3100,
  GtA_Gt_Handshake = 3101,
  Gt_GtA_Heartbeat = 3102,
  Gt_GtA_ClientClose = 3103,
  GtA_Gt_ClientDisconnect = 3104,
  GtA_Gt_ClientMessage = 3105,
  GtA_Gt_Broadcast = 3106,
  GtA_Gt_SetServerId = 3107,
  Dbc_Db_Handshake = 3200,
  Db_Dbc_Handshake = 3201,
  Dbc_Db_Heartbeat = 3202,
  Dbc_Db_Request = 3203,
  Db_Dbc_Response = 3204,
  Hc_H_Handshake = 3300,
  H_Hc_Handshake = 3301,
  Hc_H_Heartbeat = 3302,
  G_G_HubTest = 3400,
  SMSGID_Max = 5000,
  SMSGID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SMSGID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SMSGID_IsValid(int value);
constexpr SMSGID SMSGID_MIN = SMSGID_None;
constexpr SMSGID SMSGID_MAX = SMSGID_Max;
constexpr int SMSGID_ARRAYSIZE = SMSGID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SMSGID_descriptor();
template<typename T>
inline const std::string& SMSGID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SMSGID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SMSGID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SMSGID_descriptor(), enum_t_value);
}
inline bool SMSGID_Parse(
    const std::string& name, SMSGID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SMSGID>(
    SMSGID_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xsf_pbid

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xsf_pbid::SMSGID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xsf_pbid::SMSGID>() {
  return ::xsf_pbid::SMSGID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SMessageID_2eproto

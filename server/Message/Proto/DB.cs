// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DB.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace XsfPb {

  /// <summary>Holder for reflection information generated from DB.proto</summary>
  public static partial class DBReflection {

    #region Descriptor
    /// <summary>File descriptor for DB.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DBReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CghEQi5wcm90bxIGeHNmX3BiIiUKEERiY19EYl9IYW5kc2hha2USEQoJc2Vy",
            "dmVyX2lkGAEgASgNIiUKEERiX0RiY19IYW5kc2hha2USEQoJc2VydmVyX2lk",
            "GAEgASgNIhIKEERiY19EYl9IZWFydGJlYXQiWwoORGJjX0RiX1JlcXVlc3QS",
            "EQoJc2VyaWFsX2lkGAEgASgEEhUKDWRiX3JlcXVlc3RfaWQYAiABKA0SEAoI",
            "cXVldWVfaWQYAyABKA0SDQoFZGF0YXMYBCABKAwiUAoPRGJfRGJjX1Jlc3Bv",
            "bnNlEhEKCXNlcmlhbF9pZBgBIAEoBBIMCgRjb2RlGAIgASgNEg0KBXRvdGFs",
            "GAMgASgNEg0KBWRhdGFzGAQgASgMYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::XsfPb.Dbc_Db_Handshake), global::XsfPb.Dbc_Db_Handshake.Parser, new[]{ "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XsfPb.Db_Dbc_Handshake), global::XsfPb.Db_Dbc_Handshake.Parser, new[]{ "ServerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XsfPb.Dbc_Db_Heartbeat), global::XsfPb.Dbc_Db_Heartbeat.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XsfPb.Dbc_Db_Request), global::XsfPb.Dbc_Db_Request.Parser, new[]{ "SerialId", "DbRequestId", "QueueId", "Datas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::XsfPb.Db_Dbc_Response), global::XsfPb.Db_Dbc_Response.Parser, new[]{ "SerialId", "Code", "Total", "Datas" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// db connector --> db 握手
  /// </summary>
  public sealed partial class Dbc_Db_Handshake : pb::IMessage<Dbc_Db_Handshake> {
    private static readonly pb::MessageParser<Dbc_Db_Handshake> _parser = new pb::MessageParser<Dbc_Db_Handshake>(() => new Dbc_Db_Handshake());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dbc_Db_Handshake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XsfPb.DBReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Handshake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Handshake(Dbc_Db_Handshake other) : this() {
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Handshake Clone() {
      return new Dbc_Db_Handshake(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    /// 服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dbc_Db_Handshake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dbc_Db_Handshake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dbc_Db_Handshake other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// db --> db connector 握手反馈
  /// </summary>
  public sealed partial class Db_Dbc_Handshake : pb::IMessage<Db_Dbc_Handshake> {
    private static readonly pb::MessageParser<Db_Dbc_Handshake> _parser = new pb::MessageParser<Db_Dbc_Handshake>(() => new Db_Dbc_Handshake());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Db_Dbc_Handshake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XsfPb.DBReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Db_Dbc_Handshake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Db_Dbc_Handshake(Db_Dbc_Handshake other) : this() {
      serverId_ = other.serverId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Db_Dbc_Handshake Clone() {
      return new Db_Dbc_Handshake(this);
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 1;
    private uint serverId_;
    /// <summary>
    /// 服务器id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Db_Dbc_Handshake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Db_Dbc_Handshake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerId != other.ServerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ServerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ServerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Db_Dbc_Handshake other) {
      if (other == null) {
        return;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ServerId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// db connector --> db 心跳
  /// </summary>
  public sealed partial class Dbc_Db_Heartbeat : pb::IMessage<Dbc_Db_Heartbeat> {
    private static readonly pb::MessageParser<Dbc_Db_Heartbeat> _parser = new pb::MessageParser<Dbc_Db_Heartbeat>(() => new Dbc_Db_Heartbeat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dbc_Db_Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XsfPb.DBReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Heartbeat(Dbc_Db_Heartbeat other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Heartbeat Clone() {
      return new Dbc_Db_Heartbeat(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dbc_Db_Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dbc_Db_Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dbc_Db_Heartbeat other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// db connector --> db 请求
  /// </summary>
  public sealed partial class Dbc_Db_Request : pb::IMessage<Dbc_Db_Request> {
    private static readonly pb::MessageParser<Dbc_Db_Request> _parser = new pb::MessageParser<Dbc_Db_Request>(() => new Dbc_Db_Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dbc_Db_Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XsfPb.DBReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Request(Dbc_Db_Request other) : this() {
      serialId_ = other.serialId_;
      dbRequestId_ = other.dbRequestId_;
      queueId_ = other.queueId_;
      datas_ = other.datas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dbc_Db_Request Clone() {
      return new Dbc_Db_Request(this);
    }

    /// <summary>Field number for the "serial_id" field.</summary>
    public const int SerialIdFieldNumber = 1;
    private ulong serialId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SerialId {
      get { return serialId_; }
      set {
        serialId_ = value;
      }
    }

    /// <summary>Field number for the "db_request_id" field.</summary>
    public const int DbRequestIdFieldNumber = 2;
    private uint dbRequestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DbRequestId {
      get { return dbRequestId_; }
      set {
        dbRequestId_ = value;
      }
    }

    /// <summary>Field number for the "queue_id" field.</summary>
    public const int QueueIdFieldNumber = 3;
    private uint queueId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint QueueId {
      get { return queueId_; }
      set {
        queueId_ = value;
      }
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 4;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dbc_Db_Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dbc_Db_Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialId != other.SerialId) return false;
      if (DbRequestId != other.DbRequestId) return false;
      if (QueueId != other.QueueId) return false;
      if (Datas != other.Datas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialId != 0UL) hash ^= SerialId.GetHashCode();
      if (DbRequestId != 0) hash ^= DbRequestId.GetHashCode();
      if (QueueId != 0) hash ^= QueueId.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SerialId);
      }
      if (DbRequestId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DbRequestId);
      }
      if (QueueId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(QueueId);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Datas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SerialId);
      }
      if (DbRequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DbRequestId);
      }
      if (QueueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(QueueId);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dbc_Db_Request other) {
      if (other == null) {
        return;
      }
      if (other.SerialId != 0UL) {
        SerialId = other.SerialId;
      }
      if (other.DbRequestId != 0) {
        DbRequestId = other.DbRequestId;
      }
      if (other.QueueId != 0) {
        QueueId = other.QueueId;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SerialId = input.ReadUInt64();
            break;
          }
          case 16: {
            DbRequestId = input.ReadUInt32();
            break;
          }
          case 24: {
            QueueId = input.ReadUInt32();
            break;
          }
          case 34: {
            Datas = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// db --> db connector 请求结果
  /// </summary>
  public sealed partial class Db_Dbc_Response : pb::IMessage<Db_Dbc_Response> {
    private static readonly pb::MessageParser<Db_Dbc_Response> _parser = new pb::MessageParser<Db_Dbc_Response>(() => new Db_Dbc_Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Db_Dbc_Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::XsfPb.DBReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Db_Dbc_Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Db_Dbc_Response(Db_Dbc_Response other) : this() {
      serialId_ = other.serialId_;
      code_ = other.code_;
      total_ = other.total_;
      datas_ = other.datas_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Db_Dbc_Response Clone() {
      return new Db_Dbc_Response(this);
    }

    /// <summary>Field number for the "serial_id" field.</summary>
    public const int SerialIdFieldNumber = 1;
    private ulong serialId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SerialId {
      get { return serialId_; }
      set {
        serialId_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 3;
    private uint total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "datas" field.</summary>
    public const int DatasFieldNumber = 4;
    private pb::ByteString datas_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Datas {
      get { return datas_; }
      set {
        datas_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Db_Dbc_Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Db_Dbc_Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SerialId != other.SerialId) return false;
      if (Code != other.Code) return false;
      if (Total != other.Total) return false;
      if (Datas != other.Datas) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SerialId != 0UL) hash ^= SerialId.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Datas.Length != 0) hash ^= Datas.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SerialId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SerialId);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (Total != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Total);
      }
      if (Datas.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Datas);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SerialId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SerialId);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Total);
      }
      if (Datas.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Datas);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Db_Dbc_Response other) {
      if (other == null) {
        return;
      }
      if (other.SerialId != 0UL) {
        SerialId = other.SerialId;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Datas.Length != 0) {
        Datas = other.Datas;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SerialId = input.ReadUInt64();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
          case 24: {
            Total = input.ReadUInt32();
            break;
          }
          case 34: {
            Datas = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
